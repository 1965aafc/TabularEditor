// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for CalculatedColumn
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class CalculatedColumn: Column, IExpressionObject
	{
	    protected internal new TOM.CalculatedColumn MetadataObject { get { return base.MetadataObject as TOM.CalculatedColumn; } internal set { base.MetadataObject = value; } }

        /// <summary>
        /// Gets or sets the IsDataTypeInferred of the CalculatedColumn.
        /// </summary>
		[DisplayName("Data Type Inferred")]
		[Category("Other"),IntelliSense("The Data Type Inferred of this CalculatedColumn.")]
		public bool IsDataTypeInferred {
			get {
			    return MetadataObject.IsDataTypeInferred;
			}
			set {
				var oldValue = IsDataTypeInferred;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("IsDataTypeInferred", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsDataTypeInferred = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "IsDataTypeInferred", oldValue, value));
				OnPropertyChanged("IsDataTypeInferred", oldValue, value);
			}
		}
		private bool ShouldSerializeIsDataTypeInferred() { return false; }
        /// <summary>
        /// Gets or sets the Expression of the CalculatedColumn.
        /// </summary>
		[DisplayName("Expression")]
		[Category("Options"),IntelliSense("The Expression of this CalculatedColumn.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string Expression {
			get {
			    return MetadataObject.Expression;
			}
			set {
				var oldValue = Expression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Expression", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Expression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Expression", oldValue, value));
				OnPropertyChanged("Expression", oldValue, value);
			}
		}
		private bool ShouldSerializeExpression() { return false; }



		/// <summary>
		/// Creates a new CalculatedColumn and adds it to the parent Table.
		/// </summary>
		public CalculatedColumn(Table parent) : base(new TOM.CalculatedColumn()) {
			MetadataObject.Name = parent.MetadataObject.Columns.GetNewName("New CalculatedColumn");
			parent.Columns.Add(this);
			Init();
		}
	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.CalculatedColumn();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


		public Table Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Table;
			}
		}

		public CalculatedColumn Clone(string newName = null) {
		    Handler.BeginUpdate("Clone CalculatedColumn");

				var tom = MetadataObject.Clone();
				tom.Name = Parent.Columns.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				var obj = new CalculatedColumn(tom);

            Handler.EndUpdate();

            return obj;
		}

		
		/// <summary>
		/// Creates a CalculatedColumn object representing an existing TOM CalculatedColumn.
		/// </summary>
		internal CalculatedColumn(TOM.CalculatedColumn metadataObject) : base(metadataObject)
		{
		}	
    }
}
