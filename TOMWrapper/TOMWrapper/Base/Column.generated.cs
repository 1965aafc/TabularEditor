
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             Represents a base class of a column object of a Tabular model, used to specify a DataColumn, RowNumberColumn, CalculatedColumn, or CalculatedTableColumn.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public abstract partial class Column: TabularNamedObject
			, IDetailObject
			, IHideableObject
			, IErrorMessageObject
			, ITabularTableObject
			, IDescriptionObject
			, IFormattableObject
			, IAnnotationObject
			, ITabularPerspectiveObject
			, ITranslatableObject
	{
	    protected internal new TOM.Column MetadataObject { get { return base.MetadataObject as TOM.Column; } internal set { base.MetadataObject = value; } }

/// <summary> 
///             Gets or sets the type of data stored in the column. For a DataColumn, specifies the data type. See  for a list of supported data types.  
///             </summary><returns>A DataType object that represents the column data type.</returns>
		[DisplayName("Data Type")]
		[Category("Metadata"),Description(@"Gets or sets the type of data stored in the column. For a DataColumn, specifies the data type. See  for a list of supported data types."),IntelliSense("The Data Type of this Column.")]
		public DataType DataType {
			get {
			    return (DataType)MetadataObject.DataType;
			}
			set {
				var oldValue = DataType;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DATATYPE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DataType = (TOM.DataType)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DATATYPE, oldValue, value));
				OnPropertyChanged(Properties.DATATYPE, oldValue, value);
			}
		}
		private bool ShouldSerializeDataType() { return false; }
        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		/// <summary>
///             Gets or sets the data category of the object.
///             </summary><returns>The data category of the object.</returns>
		[DisplayName("Data Category")]
		[Category("Metadata"),Description(@"Gets or sets the data category of the object."),IntelliSense("The Data Category of this Column.")]
		public string DataCategory {
			get {
			    return MetadataObject.DataCategory;
			}
			set {
				var oldValue = DataCategory;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DATACATEGORY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DataCategory = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DATACATEGORY, oldValue, value));
				OnPropertyChanged(Properties.DATACATEGORY, oldValue, value);
			}
		}
		private bool ShouldSerializeDataCategory() { return false; }
/// <summary>
///             Gets or sets a Description property for this object. 
///             </summary><returns>A Description property for this object.</returns>
		[DisplayName("Description")]
		[Category("Basic"),Description(@"Gets or sets a Description property for this object."),IntelliSense("The Description of this Column.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.DESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the column is hidden.
///             </summary><returns>true if the column is hidden; otherwise, false.</returns>
		[DisplayName("Hidden")]
		[Category("Basic"),Description(@"Gets or sets a value that indicates whether the column is hidden."),IntelliSense("The Hidden of this Column.")]
		public bool IsHidden {
			get {
			    return MetadataObject.IsHidden;
			}
			set {
				var oldValue = IsHidden;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISHIDDEN, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsHidden = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISHIDDEN, oldValue, value));
				OnPropertyChanged(Properties.ISHIDDEN, oldValue, value);
				Handler.UpdateObject(this);
			}
		}
		private bool ShouldSerializeIsHidden() { return false; }
/// <summary>
///             Gets or sets the calculated columns or columns in a calculated table, the state of this column is either calculated (Ready), or not (CalculationNeeded), or an error. 
///             For non-calculated columns it is always Ready.
///             </summary><returns>The state object.</returns>
		[DisplayName("State")]
		[Category("Metadata"),Description(@"Gets or sets the calculated columns or columns in a calculated table, the state of this column is either calculated (Ready), or not (CalculationNeeded), or an error. 
            For non-calculated columns it is always Ready."),IntelliSense("The State of this Column.")]
		public ObjectState State {
			get {
			    return (ObjectState)MetadataObject.State;
			}
			
		}
		private bool ShouldSerializeState() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the values of the column is unique.
///             </summary><returns>true if the values of the column is unique; otherwise, false.</returns>
		[DisplayName("Unique")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the values of the column is unique."),IntelliSense("The Unique of this Column.")]
		public bool IsUnique {
			get {
			    return MetadataObject.IsUnique;
			}
			set {
				var oldValue = IsUnique;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISUNIQUE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsUnique = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISUNIQUE, oldValue, value));
				OnPropertyChanged(Properties.ISUNIQUE, oldValue, value);
			}
		}
		private bool ShouldSerializeIsUnique() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the column is a key of the table.
///             </summary><returns>true if the column is a key of the table; otherwise, false.</returns>
		[DisplayName("Key")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the column is a key of the table."),IntelliSense("The Key of this Column.")]
		public bool IsKey {
			get {
			    return MetadataObject.IsKey;
			}
			set {
				var oldValue = IsKey;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISKEY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsKey = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISKEY, oldValue, value));
				OnPropertyChanged(Properties.ISKEY, oldValue, value);
			}
		}
		private bool ShouldSerializeIsKey() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the column is nullable.
///             </summary><returns>true if the column is nullable; otherwise, false.</returns>
		[DisplayName("Nullable")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the column is nullable."),IntelliSense("The Nullable of this Column.")]
		public bool IsNullable {
			get {
			    return MetadataObject.IsNullable;
			}
			set {
				var oldValue = IsNullable;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISNULLABLE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsNullable = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISNULLABLE, oldValue, value));
				OnPropertyChanged(Properties.ISNULLABLE, oldValue, value);
			}
		}
		private bool ShouldSerializeIsNullable() { return false; }
/// <summary>
///             Gets or sets the alignment for this property.
///             </summary><returns>The alignment for this property.</returns>
		[DisplayName("Alignment")]
		[Category("Other"),Description(@"Gets or sets the alignment for this property."),IntelliSense("The Alignment of this Column.")]
		public Alignment Alignment {
			get {
			    return (Alignment)MetadataObject.Alignment;
			}
			set {
				var oldValue = Alignment;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ALIGNMENT, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Alignment = (TOM.Alignment)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ALIGNMENT, oldValue, value));
				OnPropertyChanged(Properties.ALIGNMENT, oldValue, value);
			}
		}
		private bool ShouldSerializeAlignment() { return false; }
/// <summary>
///             Gets or sets a 32-bit integer specifying the position of the Detail record in the Table.
///             </summary><returns>A 32-bit integer specifying the position of the Detail record in the Table.</returns>
		[DisplayName("Table Detail Position")]
		[Category("Other"),Description(@"Gets or sets a 32-bit integer specifying the position of the Detail record in the Table."),IntelliSense("The Table Detail Position of this Column.")]
		public int TableDetailPosition {
			get {
			    return MetadataObject.TableDetailPosition;
			}
			set {
				var oldValue = TableDetailPosition;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TABLEDETAILPOSITION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TableDetailPosition = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TABLEDETAILPOSITION, oldValue, value));
				OnPropertyChanged(Properties.TABLEDETAILPOSITION, oldValue, value);
			}
		}
		private bool ShouldSerializeTableDetailPosition() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the label is the default label.
///             </summary><returns>true if the label is the default label; otherwise, false.</returns>
		[DisplayName("Default Label")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the label is the default label."),IntelliSense("The Default Label of this Column.")]
		public bool IsDefaultLabel {
			get {
			    return MetadataObject.IsDefaultLabel;
			}
			set {
				var oldValue = IsDefaultLabel;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISDEFAULTLABEL, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsDefaultLabel = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISDEFAULTLABEL, oldValue, value));
				OnPropertyChanged(Properties.ISDEFAULTLABEL, oldValue, value);
			}
		}
		private bool ShouldSerializeIsDefaultLabel() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the image used is the default image.
///             </summary><returns>true if the image used is the default image; otherwise, false.</returns>
		[DisplayName("Default Image")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the image used is the default image."),IntelliSense("The Default Image of this Column.")]
		public bool IsDefaultImage {
			get {
			    return MetadataObject.IsDefaultImage;
			}
			set {
				var oldValue = IsDefaultImage;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISDEFAULTIMAGE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsDefaultImage = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISDEFAULTIMAGE, oldValue, value));
				OnPropertyChanged(Properties.ISDEFAULTIMAGE, oldValue, value);
			}
		}
		private bool ShouldSerializeIsDefaultImage() { return false; }
/// <summary>
///             Gets or sets the aggregation function used by this column.
///             </summary><returns>The aggregation function used by this column.</returns>
		[DisplayName("Summarize By")]
		[Category("Other"),Description(@"Gets or sets the aggregation function used by this column."),IntelliSense("The Summarize By of this Column.")]
		public AggregateFunction SummarizeBy {
			get {
			    return (AggregateFunction)MetadataObject.SummarizeBy;
			}
			set {
				var oldValue = SummarizeBy;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.SUMMARIZEBY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.SummarizeBy = (TOM.AggregateFunction)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.SUMMARIZEBY, oldValue, value));
				OnPropertyChanged(Properties.SUMMARIZEBY, oldValue, value);
			}
		}
		private bool ShouldSerializeSummarizeBy() { return false; }
/// <summary>
///             Gets or sets the column type.
///             </summary><returns>The column type.</returns>
		[DisplayName("Type")]
		[Category("Other"),Description(@"Gets or sets the column type."),IntelliSense("The Type of this Column.")][Browsable(false)]
		public ColumnType Type {
			get {
			    return (ColumnType)MetadataObject.Type;
			}
			
		}
		private bool ShouldSerializeType() { return false; }
/// <summary>
///             Gets or sets the format string set for this column.
///             </summary><returns>The format string set for this column.</returns>
		[DisplayName("Format String")]
		[Category("Options"),Description(@"Gets or sets the format string set for this column."),IntelliSense("The Format String of this Column.")][TypeConverter(typeof(FormatStringConverter))]
		public string FormatString {
			get {
			    return MetadataObject.FormatString;
			}
			set {
				var oldValue = FormatString;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.FORMATSTRING, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FormatString = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.FORMATSTRING, oldValue, value));
				OnPropertyChanged(Properties.FORMATSTRING, oldValue, value);
			}
		}
		private bool ShouldSerializeFormatString() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the column can be used in an MDX expression or query.
///             </summary><returns>true if the column can be used in an MDX expression or query; otherwise, false.</returns>
		[DisplayName("Available In MDX")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the column can be used in an MDX expression or query."),IntelliSense("The Available In MDX of this Column.")]
		public bool IsAvailableInMDX {
			get {
			    return MetadataObject.IsAvailableInMDX;
			}
			set {
				var oldValue = IsAvailableInMDX;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISAVAILABLEINMDX, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsAvailableInMDX = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISAVAILABLEINMDX, oldValue, value));
				OnPropertyChanged(Properties.ISAVAILABLEINMDX, oldValue, value);
			}
		}
		private bool ShouldSerializeIsAvailableInMDX() { return false; }
/// <summary>
///             Gets or sets a value that indicates whether the table keeps the unique rows.
///             </summary><returns>true if the table keeps the unique rows; otherwise, false.</returns>
		[DisplayName("Keep Unique Rows")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the table keeps the unique rows."),IntelliSense("The Keep Unique Rows of this Column.")]
		public bool KeepUniqueRows {
			get {
			    return MetadataObject.KeepUniqueRows;
			}
			set {
				var oldValue = KeepUniqueRows;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.KEEPUNIQUEROWS, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.KeepUniqueRows = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.KEEPUNIQUEROWS, oldValue, value));
				OnPropertyChanged(Properties.KEEPUNIQUEROWS, oldValue, value);
			}
		}
		private bool ShouldSerializeKeepUniqueRows() { return false; }
/// <summary>
///             Gets or sets a 32-bit integer display ordinal.
///             </summary><returns>A 32-bit integer display ordinal.</returns>
		[DisplayName("Display Ordinal")]
		[Category("Other"),Description(@"Gets or sets a 32-bit integer display ordinal."),IntelliSense("The Display Ordinal of this Column.")]
		public int DisplayOrdinal {
			get {
			    return MetadataObject.DisplayOrdinal;
			}
			set {
				var oldValue = DisplayOrdinal;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DISPLAYORDINAL, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DisplayOrdinal = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DISPLAYORDINAL, oldValue, value));
				OnPropertyChanged(Properties.DISPLAYORDINAL, oldValue, value);
			}
		}
		private bool ShouldSerializeDisplayOrdinal() { return false; }
/// <summary>
///             Gets or sets a string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
///             </summary><returns>A string that explains the error state associated with the current object.</returns>
		[DisplayName("Error Message")]
		[Category("Metadata"),Description(@"Gets or sets a string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects."),IntelliSense("The Error Message of this Column.")]
		public string ErrorMessage {
			get {
			    return MetadataObject.ErrorMessage;
			}
			
		}
		private bool ShouldSerializeErrorMessage() { return false; }
/// <summary>
///             Gets or sets the data type in the external data source (e.g. NVARCHAR(50) for a string column).
///             </summary><returns>The data type in the external data source.</returns>
		[DisplayName("Source Provider Type")]
		[Category("Other"),Description(@"Gets or sets the data type in the external data source (e.g. NVARCHAR(50) for a string column)."),IntelliSense("The Source Provider Type of this Column.")]
		public string SourceProviderType {
			get {
			    return MetadataObject.SourceProviderType;
			}
			set {
				var oldValue = SourceProviderType;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.SOURCEPROVIDERTYPE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.SourceProviderType = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.SOURCEPROVIDERTYPE, oldValue, value));
				OnPropertyChanged(Properties.SOURCEPROVIDERTYPE, oldValue, value);
			}
		}
		private bool ShouldSerializeSourceProviderType() { return false; }
/// <summary>
///             Gets or sets the display folder used by this column.
///             </summary><returns>The display folder used by this column.</returns>
		[DisplayName("Display Folder")]
		[Category("Basic"),Description(@"Gets or sets the display folder used by this column."),IntelliSense("The Display Folder of this Column.")][Editor(typeof(CustomDialogEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string DisplayFolder {
			get {
			    return MetadataObject.DisplayFolder;
			}
			set {
				var oldValue = DisplayFolder;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DISPLAYFOLDER, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DisplayFolder = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DISPLAYFOLDER, oldValue, value));
				OnPropertyChanged(Properties.DISPLAYFOLDER, oldValue, value);
				Handler.UpdateFolders(Table);
			}
		}
		private bool ShouldSerializeDisplayFolder() { return false; }
        /// <summary>
        /// Collection of localized Display Folders for this Column.
        /// </summary>
        [Browsable(true),DisplayName("Translated Display Folders"),Description("Shows all translated Display Folders of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDisplayFolders { private set; get; }

		[DisplayName("Encoding Hint")]
		[Category("Other"),Description(@""),IntelliSense("The Encoding Hint of this Column.")]
		public EncodingHintType EncodingHint {
			get {
			    return (EncodingHintType)MetadataObject.EncodingHint;
			}
			set {
				var oldValue = EncodingHint;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ENCODINGHINT, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.EncodingHint = (TOM.EncodingHintType)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ENCODINGHINT, oldValue, value));
				OnPropertyChanged(Properties.ENCODINGHINT, oldValue, value);
			}
		}
		private bool ShouldSerializeEncodingHint() { return false; }
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
/// <summary>
///             Gets or sets the column used to sort rows in a table.
///             </summary><returns>The column used to sort rows in a table.</returns>
		[DisplayName("Sort By Column")]
		[Category("Options"),Description(@"Gets or sets the column used to sort rows in a table."),IntelliSense("The Sort By Column of this Column.")][TypeConverter(typeof(TableColumnConverter))]
		public Column SortByColumn {
			get {
				if (MetadataObject.SortByColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.SortByColumn] as Column;
            }
			set {
				var oldValue = SortByColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.SORTBYCOLUMN, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.SortByColumn = value == null ? null : Table.Columns[value.MetadataObject.Name].MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.SORTBYCOLUMN, oldValue, value));
				OnPropertyChanged(Properties.SORTBYCOLUMN, oldValue, value);
			}
		}
		private bool ShouldSerializeSortByColumn() { return false; }

        /// <Summary>
		/// Collection of perspectives in which this Column is visible.
		/// </Summary>
		[Browsable(true),DisplayName("Shown in Perspective"), Description("Provides an easy way to include or exclude this object from the perspectives of the model."), Category("Translations and Perspectives")]
        public PerspectiveIndexer InPerspective { get; private set; }
        /// <summary>
        /// Collection of localized descriptions for this Column.
        /// </summary>
        [Browsable(true),DisplayName("Translated Descriptions"),Description("Shows all translated descriptions of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this Column.
        /// </summary>
        [Browsable(true),DisplayName("Translated Names"),Description("Shows all translated names of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedNames { private set; get; }


        internal override ITabularObjectCollection GetCollectionForChild(TabularObject child)
        {
			if (child is Variation) return Variations;
            return base.GetCollectionForChild(child);
        }

        /// <summary>
        /// The collection of Variation objects on this Column.
        /// </summary>
		[DisplayName("Variations")]
		[Category("Other"),IntelliSense("The collection of Variation objects on this Column.")][NoMultiselect(),Editor(typeof(ClonableObjectCollectionEditor<Variation>),typeof(UITypeEditor))]
		public VariationCollection Variations { get; protected set; }

		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected Column(TOM.Column metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			// Create indexers for translations:
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
			TranslatedDisplayFolders = new TranslationIndexer(this, TOM.TranslatedProperty.DisplayFolder);

			// Create indexer for perspectives:
			InPerspective = new PerspectiveColumnIndexer(this);
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
			
			// Instantiate child collections:
			Variations = new VariationCollection(this.GetObjectPath() + ".Variations", MetadataObject.Variations, this);

			// Populate child collections:
			Variations.CreateChildrenFromMetadata();

			// Hook up event handlers on child collections:
			Variations.CollectionChanged += Children_CollectionChanged;
		}


		internal override void Reinit() {
			Variations.Reinit();
		}

		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case Properties.TRANSLATEDNAMES:
				case Properties.TRANSLATEDDESCRIPTIONS:
				case Properties.TRANSLATEDDISPLAYFOLDERS:
					return Model.Cultures.Any();
				
				// Hides the perspective property in the grid, unless the model actually contains perspectives:
				case Properties.INPERSPECTIVE:
					return Model.Perspectives.Any();
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }


	/// <summary>
	/// Collection class for Column. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public sealed partial class ColumnCollection: TabularObjectCollection<Column>
	{
		internal Table Table { get { return Parent as Table; } }
		TOM.ColumnCollection TOM_Collection;
		internal ColumnCollection(string collectionName, TOM.ColumnCollection metadataObjectCollection, Table parent) : base(collectionName, parent)
		{
			TOM_Collection = metadataObjectCollection;
		}

        protected override void TOM_Add(TOM.MetadataObject obj) { TOM_Collection.Add(obj as TOM.Column); }
        protected override bool TOM_Contains(TOM.MetadataObject obj) { return TOM_Collection.Contains(obj as TOM.Column); }
        protected override void TOM_Remove(TOM.MetadataObject obj) { TOM_Collection.Remove(obj as TOM.Column); }
        protected override void TOM_Clear() { TOM_Collection.Clear(); }
        protected override bool TOM_ContainsName(string name) { return TOM_Collection.ContainsName(name); }
        protected override TOM.MetadataObject TOM_Get(int index) { return TOM_Collection[index]; }
        protected override TOM.MetadataObject TOM_Get(string name) { return TOM_Collection[name]; }
        public override string GetNewName(string prefix = null) { return string.IsNullOrEmpty(prefix) ? TOM_Collection.GetNewName() : TOM_Collection.GetNewName(prefix); }
		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				if(Table.MetadataObject.Columns[i] is TOM.RowNumberColumn) ixOffset++;
				item.MetadataObject = Table.MetadataObject.Columns[i + ixOffset] as TOM.Column;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			TOM_Collection = Table.MetadataObject.Columns;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the ColumnCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in TOM_Collection) {
				switch(obj.Type) {
				    case TOM.ColumnType.Data: DataColumn.CreateFromMetadata(obj as TOM.DataColumn).Collection = this; break;
					case TOM.ColumnType.Calculated: CalculatedColumn.CreateFromMetadata(obj as TOM.CalculatedColumn).Collection = this; break;
					case TOM.ColumnType.CalculatedTableColumn:CalculatedTableColumn.CreateFromMetadata(obj as TOM.CalculatedTableColumn).Collection = this; break;
					default: break;
				}
			}
		}

		[Description("Sets the DataType property of all objects in the collection at once.")]
		public DataType DataType {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DataType"));
				this.ToList().ForEach(item => { item.DataType = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DataCategory property of all objects in the collection at once.")]
		public string DataCategory {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DataCategory"));
				this.ToList().ForEach(item => { item.DataCategory = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the Description property of all objects in the collection at once.")]
		public string Description {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Description"));
				this.ToList().ForEach(item => { item.Description = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsHidden property of all objects in the collection at once.")]
		public bool IsHidden {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsHidden"));
				this.ToList().ForEach(item => { item.IsHidden = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsUnique property of all objects in the collection at once.")]
		public bool IsUnique {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsUnique"));
				this.ToList().ForEach(item => { item.IsUnique = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsKey property of all objects in the collection at once.")]
		public bool IsKey {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsKey"));
				this.ToList().ForEach(item => { item.IsKey = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsNullable property of all objects in the collection at once.")]
		public bool IsNullable {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsNullable"));
				this.ToList().ForEach(item => { item.IsNullable = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the Alignment property of all objects in the collection at once.")]
		public Alignment Alignment {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Alignment"));
				this.ToList().ForEach(item => { item.Alignment = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the TableDetailPosition property of all objects in the collection at once.")]
		public int TableDetailPosition {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("TableDetailPosition"));
				this.ToList().ForEach(item => { item.TableDetailPosition = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsDefaultLabel property of all objects in the collection at once.")]
		public bool IsDefaultLabel {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsDefaultLabel"));
				this.ToList().ForEach(item => { item.IsDefaultLabel = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsDefaultImage property of all objects in the collection at once.")]
		public bool IsDefaultImage {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsDefaultImage"));
				this.ToList().ForEach(item => { item.IsDefaultImage = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the SummarizeBy property of all objects in the collection at once.")]
		public AggregateFunction SummarizeBy {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("SummarizeBy"));
				this.ToList().ForEach(item => { item.SummarizeBy = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the FormatString property of all objects in the collection at once.")]
		public string FormatString {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("FormatString"));
				this.ToList().ForEach(item => { item.FormatString = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsAvailableInMDX property of all objects in the collection at once.")]
		public bool IsAvailableInMDX {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsAvailableInMDX"));
				this.ToList().ForEach(item => { item.IsAvailableInMDX = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the KeepUniqueRows property of all objects in the collection at once.")]
		public bool KeepUniqueRows {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("KeepUniqueRows"));
				this.ToList().ForEach(item => { item.KeepUniqueRows = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DisplayOrdinal property of all objects in the collection at once.")]
		public int DisplayOrdinal {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DisplayOrdinal"));
				this.ToList().ForEach(item => { item.DisplayOrdinal = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the SourceProviderType property of all objects in the collection at once.")]
		public string SourceProviderType {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("SourceProviderType"));
				this.ToList().ForEach(item => { item.SourceProviderType = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DisplayFolder property of all objects in the collection at once.")]
		public string DisplayFolder {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DisplayFolder"));
				this.ToList().ForEach(item => { item.DisplayFolder = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the EncodingHint property of all objects in the collection at once.")]
		public EncodingHintType EncodingHint {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("EncodingHint"));
				this.ToList().ForEach(item => { item.EncodingHint = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the SortByColumn property of all objects in the collection at once.")]
		public Column SortByColumn {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("SortByColumn"));
				this.ToList().ForEach(item => { item.SortByColumn = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "Column" : "Columns").ToLower());
		}
	}
}
