
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for Culture
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class Culture: TabularNamedObject
			, IAnnotationObject
			, IDeletableObject
			, IClonableObject
	{
	    protected internal new TOM.Culture MetadataObject { get { return base.MetadataObject as TOM.Culture; } internal set { base.MetadataObject = value; } }

		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.Find(name)?.Value;
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				MetadataObject.Annotations[name].Value = value;
			} else {
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
			}
			if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value));
		}
		
		public static Culture CreateFromMetadata(TOM.Culture metadataObject, bool init = true) {
			var obj = new Culture(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}


		/// <summary>
		/// Creates a new Culture and adds it to the parent Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static Culture CreateNew(Model parent, string name = null)
		{
			var metadataObject = new TOM.Culture();
			metadataObject.Name = parent.Cultures.GetNewName(string.IsNullOrWhiteSpace(name) ? "New Culture" : name);

			var obj = new Culture(metadataObject);

			parent.Cultures.Add(obj);
			
			obj.Init();

			return obj;
		}

		/// <summary>
		/// Creates a new Culture and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static Culture CreateNew(string name = null)
		{
			var metadataObject = new TOM.Culture();
			metadataObject.Name = TabularModelHandler.Singleton.Model.Cultures.GetNewName(string.IsNullOrWhiteSpace(name) ? "New Culture" : name);

			var obj = new Culture(metadataObject);

			TabularModelHandler.Singleton.Model.Cultures.Add(obj);

			obj.Init();

			return obj;
		}


		/// <summary>
		/// Creates an exact copy of this Culture object.
		/// </summary>
		public Culture Clone(string newName = null) {
		    Handler.BeginUpdate("Clone Culture");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.Culture;


			// Assign a new, unique name:
			tom.Name = Parent.Cultures.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject (but don't init until after we add it to the parent):
			var obj = CreateFromMetadata(tom, false);

			// Add the object to the parent collection:
			Parent.Cultures.Add(obj);

			obj.InternalInit();
			obj.Init();

            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.Culture;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected Culture(TOM.Culture metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case "Parent":
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }


	/// <summary>
	/// Collection class for Culture. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class CultureCollection: TabularObjectCollection<Culture, TOM.Culture, TOM.Model>
	{
		public override TabularNamedObject Parent { get { return Model; } }
		public CultureCollection(string collectionName, TOM.CultureCollection metadataObjectCollection, Model parent) : base(collectionName, metadataObjectCollection)
		{
		}

		internal override void Reinit() {
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				item.MetadataObject = Model.MetadataObject.Cultures[i] as TOM.Culture;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			MetadataObjectCollection = Model.MetadataObject.Cultures;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the CultureCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				Culture.CreateFromMetadata(obj).Collection = this;
			}
		}


		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "Culture" : "Cultures").ToLower());
		}
	}
}
