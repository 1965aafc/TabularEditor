// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for ExternalModelRoleMember
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class ExternalModelRoleMember: ModelRoleMember
			, IClonableObject
	{
	    protected internal new TOM.ExternalModelRoleMember MetadataObject { get { return base.MetadataObject as TOM.ExternalModelRoleMember; } internal set { base.MetadataObject = value; } }

        /// <summary>
        /// Gets or sets the IdentityProvider of the ExternalModelRoleMember.
        /// </summary>
		[DisplayName("Identity Provider")]
		[Category("Other"),IntelliSense("The Identity Provider of this ExternalModelRoleMember.")]
		public string IdentityProvider {
			get {
			    return MetadataObject.IdentityProvider;
			}
			set {
				var oldValue = IdentityProvider;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("IdentityProvider", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IdentityProvider = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "IdentityProvider", oldValue, value));
				OnPropertyChanged("IdentityProvider", oldValue, value);
			}
		}
		private bool ShouldSerializeIdentityProvider() { return false; }
        /// <summary>
        /// Gets or sets the MemberType of the ExternalModelRoleMember.
        /// </summary>
		[DisplayName("Member Type")]
		[Category("Other"),IntelliSense("The Member Type of this ExternalModelRoleMember.")]
		public TOM.RoleMemberType MemberType {
			get {
			    return MetadataObject.MemberType;
			}
			set {
				var oldValue = MemberType;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("MemberType", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MemberType = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "MemberType", oldValue, value));
				OnPropertyChanged("MemberType", oldValue, value);
			}
		}
		private bool ShouldSerializeMemberType() { return false; }



		/// <summary>
		/// Creates a new ExternalModelRoleMember and adds it to the parent ModelRole.
		/// </summary>
		public ExternalModelRoleMember(ModelRole parent, string name = null) : this(new TOM.ExternalModelRoleMember()) {
			
			MetadataObject.Name = GetNewName(parent.MetadataObject.Members, string.IsNullOrWhiteSpace(name) ? "New ExternalModelRoleMember" : name);

			parent.Members.Add(this);
		}


		/// <summary>
		/// Creates an exact copy of this ExternalModelRoleMember object.
		/// </summary>
		/// 
		public ExternalModelRoleMember Clone(string newName = null, ModelRole newParent = null) {
		    Handler.BeginUpdate("Clone ExternalModelRoleMember");

				// Create a clone of the underlying metadataobject:
				var tom = MetadataObject.Clone() as TOM.ExternalModelRoleMember;

				// Assign a new, unique name:
				tom.Name = Parent.Members.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
				// Create the TOM Wrapper object, representing the metadataobject:
				var obj = new ExternalModelRoleMember(tom);

				// Add the object to the parent collection:
				if(newParent != null) 
					newParent.Members.Add(obj);
				else
    				Parent.Members.Add(obj);



            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.ExternalModelRoleMember();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


		public ModelRole Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as ModelRole;
			}
		}

		/// <summary>
		/// Creates a ExternalModelRoleMember object representing an existing TOM ExternalModelRoleMember.
		/// </summary>
		internal ExternalModelRoleMember(TOM.ExternalModelRoleMember metadataObject) : base(metadataObject)
		{
		}	

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case "Parent":
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
