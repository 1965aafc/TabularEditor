
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             Represents a Key Performance Indicator object. It is a child of a Measure object.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class KPI: TabularObject
			, IDescriptionObject
			, IAnnotationObject
	{
	    protected internal new TOM.KPI MetadataObject { get { return base.MetadataObject as TOM.KPI; } internal set { base.MetadataObject = value; } }

        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		/// <summary>
///             Gets or sets the description for the KPI.
///             </summary><returns>An String description for the KPI.</returns>
		[DisplayName("Description")]
		[Category("Basic"),Description(@"Gets or sets the description for the KPI."),IntelliSense("The Description of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.DESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
/// <summary>
///             Gets or sets the target description.
///             </summary><returns>The target description.</returns>
		[DisplayName("Target Description")]
		[Category("Other"),Description(@"Gets or sets the target description."),IntelliSense("The Target Description of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string TargetDescription {
			get {
			    return MetadataObject.TargetDescription;
			}
			set {
				var oldValue = TargetDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TARGETDESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TARGETDESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.TARGETDESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeTargetDescription() { return false; }
/// <summary>
///             Gets or sets the target expression of the KPI.
///             </summary><returns>A String containing the target expression of the KPI.</returns>
		[DisplayName("Target Expression")]
		[Category("Other"),Description(@"Gets or sets the target expression of the KPI."),IntelliSense("The Target Expression of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string TargetExpression {
			get {
			    return MetadataObject.TargetExpression;
			}
			set {
				var oldValue = TargetExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TARGETEXPRESSION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TARGETEXPRESSION, oldValue, value));
				OnPropertyChanged(Properties.TARGETEXPRESSION, oldValue, value);
			}
		}
		private bool ShouldSerializeTargetExpression() { return false; }
/// <summary>Gets or sets the string format of the current KPI.</summary><returns>A String contains the target format of the current KPI.</returns>
		[DisplayName("Target Format String")]
		[Category("Other"),Description(@"Gets or sets the string format of the current KPI."),IntelliSense("The Target Format String of this KPI.")][TypeConverter(typeof(FormatStringConverter))]
		public string TargetFormatString {
			get {
			    return MetadataObject.TargetFormatString;
			}
			set {
				var oldValue = TargetFormatString;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TARGETFORMATSTRING, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetFormatString = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TARGETFORMATSTRING, oldValue, value));
				OnPropertyChanged(Properties.TARGETFORMATSTRING, oldValue, value);
			}
		}
		private bool ShouldSerializeTargetFormatString() { return false; }
/// <summary>Gets or sets a visual element that provides a quick indication of the status for a KPI.</summary><returns>The name of the status graphic.</returns>
		[DisplayName("Status Graphic")]
		[Category("Other"),Description(@"Gets or sets a visual element that provides a quick indication of the status for a KPI."),IntelliSense("The Status Graphic of this KPI.")][TypeConverter(typeof(KPIStatusGraphicConverter))]
		public string StatusGraphic {
			get {
			    return MetadataObject.StatusGraphic;
			}
			set {
				var oldValue = StatusGraphic;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.STATUSGRAPHIC, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusGraphic = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.STATUSGRAPHIC, oldValue, value));
				OnPropertyChanged(Properties.STATUSGRAPHIC, oldValue, value);
			}
		}
		private bool ShouldSerializeStatusGraphic() { return false; }
/// <summary>Gets or sets the status description for the current KPI.</summary><returns>A String containing the status description for the current KPI.</returns>
		[DisplayName("Status Description")]
		[Category("Other"),Description(@"Gets or sets the status description for the current KPI."),IntelliSense("The Status Description of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string StatusDescription {
			get {
			    return MetadataObject.StatusDescription;
			}
			set {
				var oldValue = StatusDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.STATUSDESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.STATUSDESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.STATUSDESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeStatusDescription() { return false; }
/// <summary>
///             Gets or sets an expression that is used to calculate the status of the KPI.
///             </summary><returns>An expression that is used to calculate the status of the KPI.</returns>
		[DisplayName("Status Expression")]
		[Category("Other"),Description(@"Gets or sets an expression that is used to calculate the status of the KPI."),IntelliSense("The Status Expression of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string StatusExpression {
			get {
			    return MetadataObject.StatusExpression;
			}
			set {
				var oldValue = StatusExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.STATUSEXPRESSION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.STATUSEXPRESSION, oldValue, value));
				OnPropertyChanged(Properties.STATUSEXPRESSION, oldValue, value);
			}
		}
		private bool ShouldSerializeStatusExpression() { return false; }
/// <summary>
///             Gets or sets the string that identifies the graphic to show for the trend of the KPI.
///             </summary><returns>The string that identifies the graphic to show for the trend of the KPI.</returns>
		[DisplayName("Trend Graphic")]
		[Category("Other"),Description(@"Gets or sets the string that identifies the graphic to show for the trend of the KPI."),IntelliSense("The Trend Graphic of this KPI.")][TypeConverter(typeof(KPITrendGraphicConverter))]
		public string TrendGraphic {
			get {
			    return MetadataObject.TrendGraphic;
			}
			set {
				var oldValue = TrendGraphic;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TRENDGRAPHIC, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendGraphic = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TRENDGRAPHIC, oldValue, value));
				OnPropertyChanged(Properties.TRENDGRAPHIC, oldValue, value);
			}
		}
		private bool ShouldSerializeTrendGraphic() { return false; }
/// <summary>Gets or sets the trend description for the KPI.</summary><returns>A String containing the trend description for the KPI.</returns>
		[DisplayName("Trend Description")]
		[Category("Other"),Description(@"Gets or sets the trend description for the KPI."),IntelliSense("The Trend Description of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string TrendDescription {
			get {
			    return MetadataObject.TrendDescription;
			}
			set {
				var oldValue = TrendDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TRENDDESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TRENDDESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.TRENDDESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeTrendDescription() { return false; }
/// <summary>
///             Gets or sets an expression representing the trend of the KPI.
///             </summary><returns>An expression representing the trend of the KPI.</returns>
		[DisplayName("Trend Expression")]
		[Category("Other"),Description(@"Gets or sets an expression representing the trend of the KPI."),IntelliSense("The Trend Expression of this KPI.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string TrendExpression {
			get {
			    return MetadataObject.TrendExpression;
			}
			set {
				var oldValue = TrendExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TRENDEXPRESSION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TRENDEXPRESSION, oldValue, value));
				OnPropertyChanged(Properties.TRENDEXPRESSION, oldValue, value);
			}
		}
		private bool ShouldSerializeTrendExpression() { return false; }
/// <summary>
///             Gets or sets the measure of this object.
///             </summary><returns>The measure of this object.</returns>
		[DisplayName("Measure")]
		[Category("Other"),Description(@"Gets or sets the measure of this object."),IntelliSense("The Measure of this KPI.")]
		public Measure Measure {
			get {
				if (MetadataObject.Measure == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Measure] as Measure;
            }
			
		}
		private bool ShouldSerializeMeasure() { return false; }

		public static KPI CreateFromMetadata(TOM.KPI metadataObject, bool init = true) {
			var obj = new KPI(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.KPI;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }




		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected KPI(TOM.KPI metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
