// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for KPI
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class KPI: TabularObject, IDescriptionObject
	{
	    protected internal new TOM.KPI MetadataObject { get { return base.MetadataObject as TOM.KPI; } internal set { base.MetadataObject = value; } }


		public KPI(TabularModelHandler handler, TOM.KPI kpiMetadataObject) : base(handler, kpiMetadataObject)
		{
		}
        /// <summary>
        /// Gets or sets the Description of the KPI.
        /// </summary>
		[DisplayName("Description")]
		[Category("Basic"),IntelliSense("The Description of this KPI.")]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Description", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Description", oldValue, value));
				OnPropertyChanged("Description", oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
        /// <summary>
        /// Collection of localized descriptions for this KPI.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public new TranslationIndexer TranslatedDescriptions { get { return base.TranslatedDescriptions; } }
        /// <summary>
        /// Gets or sets the TargetDescription of the KPI.
        /// </summary>
		[DisplayName("Target Description")]
		[Category("Other"),IntelliSense("The Target Description of this KPI.")]
		public string TargetDescription {
			get {
			    return MetadataObject.TargetDescription;
			}
			set {
				var oldValue = TargetDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TargetDescription", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TargetDescription", oldValue, value));
				OnPropertyChanged("TargetDescription", oldValue, value);
			}
		}
		private bool ShouldSerializeTargetDescription() { return false; }
        /// <summary>
        /// Gets or sets the TargetExpression of the KPI.
        /// </summary>
		[DisplayName("Target Expression")]
		[Category("Other"),IntelliSense("The Target Expression of this KPI.")]
		public string TargetExpression {
			get {
			    return MetadataObject.TargetExpression;
			}
			set {
				var oldValue = TargetExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TargetExpression", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TargetExpression", oldValue, value));
				OnPropertyChanged("TargetExpression", oldValue, value);
			}
		}
		private bool ShouldSerializeTargetExpression() { return false; }
        /// <summary>
        /// Gets or sets the TargetFormatString of the KPI.
        /// </summary>
		[DisplayName("Target Format String")]
		[Category("Other"),IntelliSense("The Target Format String of this KPI.")]
		public string TargetFormatString {
			get {
			    return MetadataObject.TargetFormatString;
			}
			set {
				var oldValue = TargetFormatString;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TargetFormatString", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TargetFormatString = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TargetFormatString", oldValue, value));
				OnPropertyChanged("TargetFormatString", oldValue, value);
			}
		}
		private bool ShouldSerializeTargetFormatString() { return false; }
        /// <summary>
        /// Gets or sets the StatusGraphic of the KPI.
        /// </summary>
		[DisplayName("Status Graphic")]
		[Category("Other"),IntelliSense("The Status Graphic of this KPI.")]
		public string StatusGraphic {
			get {
			    return MetadataObject.StatusGraphic;
			}
			set {
				var oldValue = StatusGraphic;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("StatusGraphic", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusGraphic = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "StatusGraphic", oldValue, value));
				OnPropertyChanged("StatusGraphic", oldValue, value);
			}
		}
		private bool ShouldSerializeStatusGraphic() { return false; }
        /// <summary>
        /// Gets or sets the StatusDescription of the KPI.
        /// </summary>
		[DisplayName("Status Description")]
		[Category("Other"),IntelliSense("The Status Description of this KPI.")]
		public string StatusDescription {
			get {
			    return MetadataObject.StatusDescription;
			}
			set {
				var oldValue = StatusDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("StatusDescription", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "StatusDescription", oldValue, value));
				OnPropertyChanged("StatusDescription", oldValue, value);
			}
		}
		private bool ShouldSerializeStatusDescription() { return false; }
        /// <summary>
        /// Gets or sets the StatusExpression of the KPI.
        /// </summary>
		[DisplayName("Status Expression")]
		[Category("Other"),IntelliSense("The Status Expression of this KPI.")]
		public string StatusExpression {
			get {
			    return MetadataObject.StatusExpression;
			}
			set {
				var oldValue = StatusExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("StatusExpression", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StatusExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "StatusExpression", oldValue, value));
				OnPropertyChanged("StatusExpression", oldValue, value);
			}
		}
		private bool ShouldSerializeStatusExpression() { return false; }
        /// <summary>
        /// Gets or sets the TrendGraphic of the KPI.
        /// </summary>
		[DisplayName("Trend Graphic")]
		[Category("Other"),IntelliSense("The Trend Graphic of this KPI.")]
		public string TrendGraphic {
			get {
			    return MetadataObject.TrendGraphic;
			}
			set {
				var oldValue = TrendGraphic;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TrendGraphic", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendGraphic = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TrendGraphic", oldValue, value));
				OnPropertyChanged("TrendGraphic", oldValue, value);
			}
		}
		private bool ShouldSerializeTrendGraphic() { return false; }
        /// <summary>
        /// Gets or sets the TrendDescription of the KPI.
        /// </summary>
		[DisplayName("Trend Description")]
		[Category("Other"),IntelliSense("The Trend Description of this KPI.")]
		public string TrendDescription {
			get {
			    return MetadataObject.TrendDescription;
			}
			set {
				var oldValue = TrendDescription;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TrendDescription", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendDescription = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TrendDescription", oldValue, value));
				OnPropertyChanged("TrendDescription", oldValue, value);
			}
		}
		private bool ShouldSerializeTrendDescription() { return false; }
        /// <summary>
        /// Gets or sets the TrendExpression of the KPI.
        /// </summary>
		[DisplayName("Trend Expression")]
		[Category("Other"),IntelliSense("The Trend Expression of this KPI.")]
		public string TrendExpression {
			get {
			    return MetadataObject.TrendExpression;
			}
			set {
				var oldValue = TrendExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("TrendExpression", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.TrendExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "TrendExpression", oldValue, value));
				OnPropertyChanged("TrendExpression", oldValue, value);
			}
		}
		private bool ShouldSerializeTrendExpression() { return false; }
        /// <summary>
        /// Gets or sets the Measure of the KPI.
        /// </summary>
		[DisplayName("Measure")]
		[Category("Other"),IntelliSense("The Measure of this KPI.")]
		public Measure Measure {
			get {
				if (MetadataObject.Measure == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Measure] as Measure;
            }
			
		}
		private bool ShouldSerializeMeasure() { return false; }
    }
}
