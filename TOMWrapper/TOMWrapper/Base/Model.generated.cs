
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             A Tabular model created at compatibility level 1200 or above.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class Model: TabularNamedObject
			, IDescriptionObject
			, IAnnotationObject
			, ITranslatableObject
	{
	    protected internal new TOM.Model MetadataObject { get { return base.MetadataObject as TOM.Model; } internal set { base.MetadataObject = value; } }

/// <summary> 
///             Gets or sets a value that indicates whether the model has local changes.
///         </summary><returns>true if the model has local changes; otherwise, false.</returns>
		[DisplayName("Has Local Changes")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether the model has local changes."),IntelliSense("The Has Local Changes of this Model.")]
		public bool HasLocalChanges {
			get {
			    return MetadataObject.HasLocalChanges;
			}
			
		}
		private bool ShouldSerializeHasLocalChanges() { return false; }
        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		/// <summary>
///             Gets or sets the description of the object.
///             </summary><returns>The String description of the object.</returns>
		[DisplayName("Description")]
		[Category("Basic"),Description(@"Gets or sets the description of the object."),IntelliSense("The Description of this Model.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.DESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
/// <summary>
///             Gets or sets the storage location of the database.
///             </summary><returns>A String containing storage location of the database.</returns>
		[DisplayName("Storage Location")]
		[Category("Other"),Description(@"Gets or sets the storage location of the database."),IntelliSense("The Storage Location of this Model.")]
		public string StorageLocation {
			get {
			    return MetadataObject.StorageLocation;
			}
			set {
				var oldValue = StorageLocation;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.STORAGELOCATION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.StorageLocation = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.STORAGELOCATION, oldValue, value));
				OnPropertyChanged(Properties.STORAGELOCATION, oldValue, value);
			}
		}
		private bool ShouldSerializeStorageLocation() { return false; }
/// <summary>
///             Gets or sets the DefaultMode value inherited by sample and full data view partitions used throughout the model.
///             </summary><returns>The DefaultMode value inherited by sample and full data view partitions used throughout the model.</returns>
		[DisplayName("Default Mode")]
		[Category("Other"),Description(@"Gets or sets the DefaultMode value inherited by sample and full data view partitions used throughout the model."),IntelliSense("The Default Mode of this Model.")]
		public ModeType DefaultMode {
			get {
			    return (ModeType)MetadataObject.DefaultMode;
			}
			set {
				var oldValue = DefaultMode;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DEFAULTMODE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DefaultMode = (TOM.ModeType)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DEFAULTMODE, oldValue, value));
				OnPropertyChanged(Properties.DEFAULTMODE, oldValue, value);
			}
		}
		private bool ShouldSerializeDefaultMode() { return false; }
/// <summary>
///             Gets or sets the data view type used by default for partitions throughout the model.
///             </summary><returns>The data view type used by default for partitions throughout the model.</returns>
		[DisplayName("Default Data View")]
		[Category("Other"),Description(@"Gets or sets the data view type used by default for partitions throughout the model."),IntelliSense("The Default Data View of this Model.")]
		public DataViewType DefaultDataView {
			get {
			    return (DataViewType)MetadataObject.DefaultDataView;
			}
			set {
				var oldValue = DefaultDataView;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DEFAULTDATAVIEW, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DefaultDataView = (TOM.DataViewType)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DEFAULTDATAVIEW, oldValue, value));
				OnPropertyChanged(Properties.DEFAULTDATAVIEW, oldValue, value);
			}
		}
		private bool ShouldSerializeDefaultDataView() { return false; }
/// <summary>
///             Gets or sets the Culture object used for translation scenarios.
///             </summary><returns>A string containing the Culture object used for translation scenarios.</returns>
		[DisplayName("Culture")]
		[Category("Other"),Description(@"Gets or sets the Culture object used for translation scenarios."),IntelliSense("The Culture of this Model.")][TypeConverter(typeof(CultureConverter))]
		public string Culture {
			get {
			    return MetadataObject.Culture;
			}
			set {
				var oldValue = Culture;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.CULTURE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Culture = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.CULTURE, oldValue, value));
				OnPropertyChanged(Properties.CULTURE, oldValue, value);
			}
		}
		private bool ShouldSerializeCulture() { return false; }
/// <summary>
///             Gets or sets the collation used on the object.
///             </summary><returns>The collation used on the object.</returns>
		[DisplayName("Collation")]
		[Category("Other"),Description(@"Gets or sets the collation used on the object."),IntelliSense("The Collation of this Model.")]
		public string Collation {
			get {
			    return MetadataObject.Collation;
			}
			set {
				var oldValue = Collation;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.COLLATION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Collation = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.COLLATION, oldValue, value));
				OnPropertyChanged(Properties.COLLATION, oldValue, value);
			}
		}
		private bool ShouldSerializeCollation() { return false; }

		[DisplayName("Default Measure")]
		[Category("Other"),Description(@""),IntelliSense("The Default Measure of this Model.")]
		public Measure DefaultMeasure {
			get {
				if (MetadataObject.DefaultMeasure == null) return null;
			    return Handler.WrapperLookup[MetadataObject.DefaultMeasure] as Measure;
            }
			set {
				var oldValue = DefaultMeasure;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DEFAULTMEASURE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DefaultMeasure = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DEFAULTMEASURE, oldValue, value));
				OnPropertyChanged(Properties.DEFAULTMEASURE, oldValue, value);
			}
		}
		private bool ShouldSerializeDefaultMeasure() { return false; }

        /// <summary>
        /// Collection of localized descriptions for this Model.
        /// </summary>
        [Browsable(true),DisplayName("Translated Descriptions"),Description("Shows all translated descriptions of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this Model.
        /// </summary>
        [Browsable(true),DisplayName("Translated Names"),Description("Shows all translated names of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedNames { private set; get; }


		public static Model CreateFromMetadata(TOM.Model metadataObject, bool init = true) {
			var obj = new Model(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.Model;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


        internal override ITabularObjectCollection GetCollectionForChild(TabularObject child)
        {
			if (child is Perspective) return Perspectives;
			if (child is Culture) return Cultures;
			if (child is DataSource) return DataSources;
			if (child is ModelRole) return Roles;
			if (child is Table) return Tables;
			if (child is Relationship) return Relationships;
            return base.GetCollectionForChild(child);
        }

        /// <summary>
        /// The collection of Perspective objects on this Model.
        /// </summary>
		[DisplayName("Perspectives")]
		[Category("Translations and Perspectives"),IntelliSense("The collection of Perspective objects on this Model.")][Editor(typeof(TabularEditor.PropertyGridUI.ClonableObjectCollectionEditor<Perspective>),typeof(UITypeEditor)),TypeConverter(typeof(StringConverter))]
		public PerspectiveCollection Perspectives { get; protected set; }
        /// <summary>
        /// The collection of Culture objects on this Model.
        /// </summary>
		[DisplayName("Cultures")]
		[Category("Translations and Perspectives"),IntelliSense("The collection of Culture objects on this Model.")][Editor(typeof(TabularEditor.PropertyGridUI.CultureCollectionEditor),typeof(UITypeEditor)),TypeConverter(typeof(StringConverter))]
		public CultureCollection Cultures { get; protected set; }
        /// <summary>
        /// The collection of DataSource objects on this Model.
        /// </summary>
		[DisplayName("Data Sources")]
		[Category("Other"),IntelliSense("The collection of Data Source objects on this Model.")][Browsable(false)]
		public DataSourceCollection DataSources { get; protected set; }
        /// <summary>
        /// The collection of ModelRole objects on this Model.
        /// </summary>
		[DisplayName("Roles")]
		[Category("Security"),IntelliSense("The collection of Model Role objects on this Model.")][Editor(typeof(TabularEditor.PropertyGridUI.ClonableObjectCollectionEditor<ModelRole>), typeof(UITypeEditor)), TypeConverter(typeof(StringConverter))]
		public ModelRoleCollection Roles { get; protected set; }
        /// <summary>
        /// The collection of Table objects on this Model.
        /// </summary>
		[DisplayName("Tables")]
		[Category("Other"),IntelliSense("The collection of Table objects on this Model.")][Browsable(false)]
		public TableCollection Tables { get; protected set; }
        /// <summary>
        /// The collection of Relationship objects on this Model.
        /// </summary>
		[DisplayName("Relationships")]
		[Category("Other"),IntelliSense("The collection of Relationship objects on this Model.")][Browsable(false)]
		public RelationshipCollection Relationships { get; protected set; }

		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected Model(TOM.Model metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			// Create indexers for translations:
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
			
			// Instantiate child collections:
			Perspectives = new PerspectiveCollection(this.GetObjectPath() + ".Perspectives", MetadataObject.Perspectives, this);
			Cultures = new CultureCollection(this.GetObjectPath() + ".Cultures", MetadataObject.Cultures, this);
			DataSources = new DataSourceCollection(this.GetObjectPath() + ".DataSources", MetadataObject.DataSources, this);
			Roles = new ModelRoleCollection(this.GetObjectPath() + ".Roles", MetadataObject.Roles, this);
			Tables = new TableCollection(this.GetObjectPath() + ".Tables", MetadataObject.Tables, this);
			Relationships = new RelationshipCollection(this.GetObjectPath() + ".Relationships", MetadataObject.Relationships, this);

			// Populate child collections:
			Perspectives.CreateChildrenFromMetadata();
			Cultures.CreateChildrenFromMetadata();
			DataSources.CreateChildrenFromMetadata();
			Roles.CreateChildrenFromMetadata();
			Tables.CreateChildrenFromMetadata();
			Relationships.CreateChildrenFromMetadata();

			// Hook up event handlers on child collections:
			Perspectives.CollectionChanged += Children_CollectionChanged;
			Cultures.CollectionChanged += Children_CollectionChanged;
			DataSources.CollectionChanged += Children_CollectionChanged;
			Roles.CollectionChanged += Children_CollectionChanged;
			Tables.CollectionChanged += Children_CollectionChanged;
			Relationships.CollectionChanged += Children_CollectionChanged;
		}


		internal override void Reinit() {
			Perspectives.Reinit();
			Cultures.Reinit();
			DataSources.Reinit();
			Roles.Reinit();
			Tables.Reinit();
			Relationships.Reinit();
		}

		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case Properties.TRANSLATEDNAMES:
				case Properties.TRANSLATEDDESCRIPTIONS:
					return Model.Cultures.Any();
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
