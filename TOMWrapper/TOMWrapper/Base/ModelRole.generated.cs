// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for ModelRole
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class ModelRole: TabularNamedObject, IDescriptionObject
	{
	    protected internal new TOM.ModelRole MetadataObject { get { return base.MetadataObject as TOM.ModelRole; } internal set { base.MetadataObject = value; } }

		public ModelRole(Model parent) : base(parent.Handler, new TOM.ModelRole(), false) {
			MetadataObject.Name = parent.MetadataObject.Roles.GetNewName("New ModelRole");
			parent.Roles.Add(this);
			Init();
		}

		public ModelRole(TabularModelHandler handler, TOM.ModelRole modelroleMetadataObject) : base(handler, modelroleMetadataObject)
		{
		}
        /// <summary>
        /// Gets or sets the Description of the ModelRole.
        /// </summary>
		[DisplayName("Description")]
		[Category("Basic"),IntelliSense("The Description of this ModelRole.")]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Description", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Description", oldValue, value));
				OnPropertyChanged("Description", oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
        /// <summary>
        /// Collection of localized descriptions for this ModelRole.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public new TranslationIndexer TranslatedDescriptions { get { return base.TranslatedDescriptions; } }
        /// <summary>
        /// Gets or sets the ModelPermission of the ModelRole.
        /// </summary>
		[DisplayName("Model Permission")]
		[Category("Security"),IntelliSense("The Model Permission of this ModelRole.")]
		public TOM.ModelPermission ModelPermission {
			get {
			    return MetadataObject.ModelPermission;
			}
			set {
				var oldValue = ModelPermission;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ModelPermission", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ModelPermission = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ModelPermission", oldValue, value));
				OnPropertyChanged("ModelPermission", oldValue, value);
			}
		}
		private bool ShouldSerializeModelPermission() { return false; }
    }

	/// <summary>
	/// Collection class for ModelRole. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class ModelRoleCollection: TabularObjectCollection<ModelRole, TOM.ModelRole, TOM.Model>
	{
		public ModelRoleCollection(TabularModelHandler handler, string collectionName, TOM.ModelRoleCollection metadataObjectCollection) : base(handler, collectionName, metadataObjectCollection)
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				new ModelRole(handler, obj) { Collection = this };
			}
		}

		[Description("Sets the Description property of all objects in the collection at once.")]
		public string Description {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Description"));
				this.ToList().ForEach(item => { item.Description = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the ModelPermission property of all objects in the collection at once.")]
		public TOM.ModelPermission ModelPermission {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("ModelPermission"));
				this.ToList().ForEach(item => { item.ModelPermission = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "ModelRole" : "Roles").ToLower());
		}
	}
}
