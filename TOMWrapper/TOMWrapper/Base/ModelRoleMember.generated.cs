
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             Defines a user principal that belongs to the Role. It is a child of a Role object.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public abstract partial class ModelRoleMember: TabularNamedObject
			, IAnnotationObject
	{
	    protected internal new TOM.ModelRoleMember MetadataObject { get { return base.MetadataObject as TOM.ModelRoleMember; } internal set { base.MetadataObject = value; } }

        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		/// <summary>
///             Gets or sets the member name.
///             </summary><returns>The member name.</returns>
		[DisplayName("Member Name")]
		[Category("Other"),Description(@"Gets or sets the member name."),IntelliSense("The Member Name of this ModelRoleMember.")]
		public string MemberName {
			get {
			    return MetadataObject.MemberName;
			}
			set {
				var oldValue = MemberName;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.MEMBERNAME, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MemberName = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.MEMBERNAME, oldValue, value));
				OnPropertyChanged(Properties.MEMBERNAME, oldValue, value);
			}
		}
		private bool ShouldSerializeMemberName() { return false; }
/// <summary>Gets or sets the member identifier.</summary><returns>The member identifier.</returns>
		[DisplayName("Member ID")]
		[Category("Other"),Description(@"Gets or sets the member identifier."),IntelliSense("The Member ID of this ModelRoleMember.")]
		public string MemberID {
			get {
			    return MetadataObject.MemberID;
			}
			set {
				var oldValue = MemberID;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.MEMBERID, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MemberID = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.MEMBERID, oldValue, value));
				OnPropertyChanged(Properties.MEMBERID, oldValue, value);
			}
		}
		private bool ShouldSerializeMemberID() { return false; }
/// <summary>Gets or sets the model role object.</summary><returns>The model role object.</returns>
		[DisplayName("Role")]
		[Category("Other"),Description(@"Gets or sets the model role object."),IntelliSense("The Role of this ModelRoleMember.")]
		public ModelRole Role {
			get {
				if (MetadataObject.Role == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Role] as ModelRole;
            }
			
		}
		private bool ShouldSerializeRole() { return false; }

		public ModelRole Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as ModelRole;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected ModelRoleMember(TOM.ModelRoleMember metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case Properties.PARENT:
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }


	/// <summary>
	/// Collection class for ModelRoleMember. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public sealed partial class ModelRoleMemberCollection: TabularObjectCollection<ModelRoleMember>
	{
		internal ModelRole ModelRole { get { return Parent as ModelRole; } }
		TOM.ModelRoleMemberCollection TOM_Collection;
		internal ModelRoleMemberCollection(string collectionName, TOM.ModelRoleMemberCollection metadataObjectCollection, ModelRole parent) : base(collectionName, parent)
		{
			TOM_Collection = metadataObjectCollection;
		}

        protected override void TOM_Add(TOM.MetadataObject obj) { TOM_Collection.Add(obj as TOM.ModelRoleMember); }
        protected override bool TOM_Contains(TOM.MetadataObject obj) { return TOM_Collection.Contains(obj as TOM.ModelRoleMember); }
        protected override void TOM_Remove(TOM.MetadataObject obj) { TOM_Collection.Remove(obj as TOM.ModelRoleMember); }
        protected override void TOM_Clear() { TOM_Collection.Clear(); }
        protected override bool TOM_ContainsName(string name) { return TOM_Collection.ContainsName(name); }
        protected override TOM.MetadataObject TOM_Get(int index) { return TOM_Collection[index]; }
        protected override TOM.MetadataObject TOM_Get(string name) { return TOM_Collection[name]; }
        public override string GetNewName(string prefix = null) { return string.IsNullOrEmpty(prefix) ? TOM_Collection.GetNewName() : TOM_Collection.GetNewName(prefix); }
        public override int IndexOf(TOM.MetadataObject obj) { return TOM_Collection.IndexOf(obj as TOM.ModelRoleMember); }
        public override int Count { get { return TOM_Collection.Count; } }
        public override IEnumerator<ModelRoleMember> GetEnumerator() { return TOM_Collection.Select(h => Handler.WrapperLookup[h]).OfType<ModelRoleMember>().GetEnumerator(); }
		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				item.MetadataObject = ModelRole.MetadataObject.Members[i + ixOffset] as TOM.ModelRoleMember;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			TOM_Collection = ModelRole.MetadataObject.Members;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the ModelRoleMemberCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in TOM_Collection) {
				if(obj is TOM.WindowsModelRoleMember) WindowsModelRoleMember.CreateFromMetadata(obj as TOM.WindowsModelRoleMember).Collection = this;
				if(obj is TOM.ExternalModelRoleMember) ExternalModelRoleMember.CreateFromMetadata(obj as TOM.ExternalModelRoleMember).Collection = this;
			}
		}

		[Description("Sets the MemberName property of all objects in the collection at once.")]
		public string MemberName {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("MemberName"));
				this.ToList().ForEach(item => { item.MemberName = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the MemberID property of all objects in the collection at once.")]
		public string MemberID {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("MemberID"));
				this.ToList().ForEach(item => { item.MemberID = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "ModelRoleMember" : "Members").ToLower());
		}
	}
}
