// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for ModelRoleMember
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public abstract partial class ModelRoleMember: TabularNamedObject, IAnnotationObject
	{
	    protected internal new TOM.ModelRoleMember MetadataObject { get { return base.MetadataObject as TOM.ModelRoleMember; } internal set { base.MetadataObject = value; } }

		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.Find(name)?.Value;
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				MetadataObject.Annotations[name].Value = value;
			} else {
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
			}
			if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value));
		}
		        /// <summary>
        /// Gets or sets the MemberName of the ModelRoleMember.
        /// </summary>
		[DisplayName("Member Name")]
		[Category("Other"),IntelliSense("The Member Name of this ModelRoleMember.")]
		public string MemberName {
			get {
			    return MetadataObject.MemberName;
			}
			set {
				var oldValue = MemberName;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("MemberName", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MemberName = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "MemberName", oldValue, value));
				OnPropertyChanged("MemberName", oldValue, value);
			}
		}
		private bool ShouldSerializeMemberName() { return false; }
        /// <summary>
        /// Gets or sets the MemberID of the ModelRoleMember.
        /// </summary>
		[DisplayName("Member ID")]
		[Category("Other"),IntelliSense("The Member ID of this ModelRoleMember.")]
		public string MemberID {
			get {
			    return MetadataObject.MemberID;
			}
			set {
				var oldValue = MemberID;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("MemberID", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MemberID = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "MemberID", oldValue, value));
				OnPropertyChanged("MemberID", oldValue, value);
			}
		}
		private bool ShouldSerializeMemberID() { return false; }
        /// <summary>
        /// Gets or sets the Role of the ModelRoleMember.
        /// </summary>
		[DisplayName("Role")]
		[Category("Other"),IntelliSense("The Role of this ModelRoleMember.")]
		public ModelRole Role {
			get {
				if (MetadataObject.Role == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Role] as ModelRole;
            }
			
		}
		private bool ShouldSerializeRole() { return false; }


		public ModelRole Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as ModelRole;
			}
		}
		
		/// <summary>
		/// Creates a ModelRoleMember object representing an existing TOM ModelRoleMember.
		/// </summary>
		internal ModelRoleMember(TOM.ModelRoleMember metadataObject) : base(metadataObject)
		{
			
		}	
    }

	/// <summary>
	/// Collection class for ModelRoleMember. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class ModelRoleMemberCollection: TabularObjectCollection<ModelRoleMember, TOM.ModelRoleMember, TOM.ModelRole>
	{
		public ModelRole Parent { get; private set; }

		public ModelRoleMemberCollection(string collectionName, TOM.ModelRoleMemberCollection metadataObjectCollection, ModelRole parent) : base(collectionName, metadataObjectCollection)
		{
			Parent = parent;

			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				if(obj is TOM.WindowsModelRoleMember) new WindowsModelRoleMember(obj as TOM.WindowsModelRoleMember) { Collection = this };
				if(obj is TOM.ExternalModelRoleMember) new ExternalModelRoleMember(obj as TOM.ExternalModelRoleMember) { Collection = this };
			}
		}

		[Description("Sets the MemberName property of all objects in the collection at once.")]
		public string MemberName {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("MemberName"));
				this.ToList().ForEach(item => { item.MemberName = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the MemberID property of all objects in the collection at once.")]
		public string MemberID {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("MemberID"));
				this.ToList().ForEach(item => { item.MemberID = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "ModelRoleMember" : "Members").ToLower());
		}
	}
}
