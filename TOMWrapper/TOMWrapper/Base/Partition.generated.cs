// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for Partition
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class Partition: TabularNamedObject, IErrorMessageObject, ITabularTableObject, IDescriptionObject
	{
	    protected internal new TOM.Partition MetadataObject { get { return base.MetadataObject as TOM.Partition; } internal set { base.MetadataObject = value; } }

		public Partition(Table parent) : base(parent.Handler, new TOM.Partition(), false) {
			MetadataObject.Name = parent.MetadataObject.Partitions.GetNewName("New Partition");
			parent.Partitions.Add(this);
			Init();
		}

		public Partition(TabularModelHandler handler, TOM.Partition partitionMetadataObject) : base(handler, partitionMetadataObject)
		{
		}
        /// <summary>
        /// Gets or sets the SourceType of the Partition.
        /// </summary>
		[DisplayName("Source Type")]
		[Category("Other"),IntelliSense("The Source Type of this Partition.")]
		public TOM.PartitionSourceType SourceType {
			get {
			    return MetadataObject.SourceType;
			}
			
		}
		private bool ShouldSerializeSourceType() { return false; }
        /// <summary>
        /// Gets or sets the Description of the Partition.
        /// </summary>
		[DisplayName("Description")]
		[Category("Basic"),IntelliSense("The Description of this Partition.")]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Description", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Description", oldValue, value));
				OnPropertyChanged("Description", oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }
        /// <summary>
        /// Collection of localized descriptions for this Partition.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public new TranslationIndexer TranslatedDescriptions { get { return base.TranslatedDescriptions; } }
        /// <summary>
        /// Gets or sets the State of the Partition.
        /// </summary>
		[DisplayName("State")]
		[Category("Metadata"),IntelliSense("The State of this Partition.")]
		public TOM.ObjectState State {
			get {
			    return MetadataObject.State;
			}
			
		}
		private bool ShouldSerializeState() { return false; }
        /// <summary>
        /// Gets or sets the Mode of the Partition.
        /// </summary>
		[DisplayName("Mode")]
		[Category("Other"),IntelliSense("The Mode of this Partition.")]
		public TOM.ModeType Mode {
			get {
			    return MetadataObject.Mode;
			}
			set {
				var oldValue = Mode;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Mode", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Mode = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Mode", oldValue, value));
				OnPropertyChanged("Mode", oldValue, value);
			}
		}
		private bool ShouldSerializeMode() { return false; }
        /// <summary>
        /// Gets or sets the DataView of the Partition.
        /// </summary>
		[DisplayName("Data View")]
		[Category("Other"),IntelliSense("The Data View of this Partition.")]
		public TOM.DataViewType DataView {
			get {
			    return MetadataObject.DataView;
			}
			set {
				var oldValue = DataView;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("DataView", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DataView = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "DataView", oldValue, value));
				OnPropertyChanged("DataView", oldValue, value);
			}
		}
		private bool ShouldSerializeDataView() { return false; }
        /// <summary>
        /// Gets or sets the ErrorMessage of the Partition.
        /// </summary>
		[DisplayName("Error Message")]
		[Category("Metadata"),IntelliSense("The Error Message of this Partition.")]
		public string ErrorMessage {
			get {
			    return MetadataObject.ErrorMessage;
			}
			
		}
		private bool ShouldSerializeErrorMessage() { return false; }
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
    }

	/// <summary>
	/// Collection class for Partition. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class PartitionCollection: TabularObjectCollection<Partition, TOM.Partition, TOM.Table>
	{
		public Table Parent { get; private set; }

		public PartitionCollection(TabularModelHandler handler, string collectionName, TOM.PartitionCollection metadataObjectCollection, Table parent) : base(handler, collectionName, metadataObjectCollection)
		{
			Parent = parent;

			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				new Partition(handler, obj) { Collection = this };
			}
		}

		[Description("Sets the Description property of all objects in the collection at once.")]
		public string Description {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Description"));
				this.ToList().ForEach(item => { item.Description = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the Mode property of all objects in the collection at once.")]
		public TOM.ModeType Mode {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Mode"));
				this.ToList().ForEach(item => { item.Mode = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DataView property of all objects in the collection at once.")]
		public TOM.DataViewType DataView {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DataView"));
				this.ToList().ForEach(item => { item.DataView = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "Partition" : "Partitions").ToLower());
		}
	}
}
