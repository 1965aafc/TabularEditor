// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for ProviderDataSource
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class ProviderDataSource: DataSource
			, IClonableObject
	{
	    protected internal new TOM.ProviderDataSource MetadataObject { get { return base.MetadataObject as TOM.ProviderDataSource; } internal set { base.MetadataObject = value; } }

        /// <summary>
        /// Gets or sets the ConnectionString of the ProviderDataSource.
        /// </summary>
		[DisplayName("Connection String")]
		[Category("Connection Details"),IntelliSense("The Connection String of this ProviderDataSource.")]
		public string ConnectionString {
			get {
			    return MetadataObject.ConnectionString;
			}
			set {
				var oldValue = ConnectionString;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ConnectionString", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ConnectionString = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ConnectionString", oldValue, value));
				OnPropertyChanged("ConnectionString", oldValue, value);
			}
		}
		private bool ShouldSerializeConnectionString() { return false; }
        /// <summary>
        /// Gets or sets the ImpersonationMode of the ProviderDataSource.
        /// </summary>
		[DisplayName("Impersonation Mode")]
		[Category("Connection Details"),IntelliSense("The Impersonation Mode of this ProviderDataSource.")]
		public TOM.ImpersonationMode ImpersonationMode {
			get {
			    return MetadataObject.ImpersonationMode;
			}
			set {
				var oldValue = ImpersonationMode;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ImpersonationMode", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ImpersonationMode = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ImpersonationMode", oldValue, value));
				OnPropertyChanged("ImpersonationMode", oldValue, value);
			}
		}
		private bool ShouldSerializeImpersonationMode() { return false; }
        /// <summary>
        /// Gets or sets the Account of the ProviderDataSource.
        /// </summary>
		[DisplayName("Account")]
		[Category("Connection Details"),IntelliSense("The Account of this ProviderDataSource.")]
		public string Account {
			get {
			    return MetadataObject.Account;
			}
			set {
				var oldValue = Account;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Account", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Account = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Account", oldValue, value));
				OnPropertyChanged("Account", oldValue, value);
			}
		}
		private bool ShouldSerializeAccount() { return false; }
        /// <summary>
        /// Gets or sets the Password of the ProviderDataSource.
        /// </summary>
		[DisplayName("Password")]
		[Category("Connection Details"),IntelliSense("The Password of this ProviderDataSource.")]
		public string Password {
			get {
			    return MetadataObject.Password;
			}
			set {
				var oldValue = Password;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Password", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Password = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Password", oldValue, value));
				OnPropertyChanged("Password", oldValue, value);
			}
		}
		private bool ShouldSerializePassword() { return false; }
        /// <summary>
        /// Gets or sets the MaxConnections of the ProviderDataSource.
        /// </summary>
		[DisplayName("Max Connections")]
		[Category("Connection Details"),IntelliSense("The Max Connections of this ProviderDataSource.")]
		public int MaxConnections {
			get {
			    return MetadataObject.MaxConnections;
			}
			set {
				var oldValue = MaxConnections;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("MaxConnections", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MaxConnections = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "MaxConnections", oldValue, value));
				OnPropertyChanged("MaxConnections", oldValue, value);
			}
		}
		private bool ShouldSerializeMaxConnections() { return false; }
        /// <summary>
        /// Gets or sets the Isolation of the ProviderDataSource.
        /// </summary>
		[DisplayName("Isolation")]
		[Category("Connection Details"),IntelliSense("The Isolation of this ProviderDataSource.")]
		public TOM.DatasourceIsolation Isolation {
			get {
			    return MetadataObject.Isolation;
			}
			set {
				var oldValue = Isolation;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Isolation", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Isolation = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Isolation", oldValue, value));
				OnPropertyChanged("Isolation", oldValue, value);
			}
		}
		private bool ShouldSerializeIsolation() { return false; }
        /// <summary>
        /// Gets or sets the Timeout of the ProviderDataSource.
        /// </summary>
		[DisplayName("Timeout")]
		[Category("Connection Details"),IntelliSense("The Timeout of this ProviderDataSource.")]
		public int Timeout {
			get {
			    return MetadataObject.Timeout;
			}
			set {
				var oldValue = Timeout;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Timeout", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Timeout = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Timeout", oldValue, value));
				OnPropertyChanged("Timeout", oldValue, value);
			}
		}
		private bool ShouldSerializeTimeout() { return false; }
        /// <summary>
        /// Gets or sets the Provider of the ProviderDataSource.
        /// </summary>
		[DisplayName("Provider")]
		[Category("Connection Details"),IntelliSense("The Provider of this ProviderDataSource.")]
		public string Provider {
			get {
			    return MetadataObject.Provider;
			}
			set {
				var oldValue = Provider;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("Provider", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Provider = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "Provider", oldValue, value));
				OnPropertyChanged("Provider", oldValue, value);
			}
		}
		private bool ShouldSerializeProvider() { return false; }



		/// <summary>
		/// Creates a new ProviderDataSource and adds it to the parent Model.
		/// </summary>
		public ProviderDataSource(Model parent, string name = null) : this(new TOM.ProviderDataSource()) {
			
			MetadataObject.Name = GetNewName(parent.MetadataObject.DataSources, string.IsNullOrWhiteSpace(name) ? "New ProviderDataSource" : name);

			parent.DataSources.Add(this);
		}

		
		public ProviderDataSource() : this(TabularModelHandler.Singleton.Model) { }


		/// <summary>
		/// Creates an exact copy of this ProviderDataSource object.
		/// </summary>
		/// 
		public ProviderDataSource Clone(string newName = null) {
		    Handler.BeginUpdate("Clone ProviderDataSource");

				// Create a clone of the underlying metadataobject:
				var tom = MetadataObject.Clone() as TOM.ProviderDataSource;

				// Assign a new, unique name:
				tom.Name = Parent.DataSources.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
				// Create the TOM Wrapper object, representing the metadataobject:
				var obj = new ProviderDataSource(tom);

				// Add the object to the parent collection:
				Parent.DataSources.Add(obj);



            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.ProviderDataSource();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}

		/// <summary>
		/// Creates a ProviderDataSource object representing an existing TOM ProviderDataSource.
		/// </summary>
		internal ProviderDataSource(TOM.ProviderDataSource metadataObject) : base(metadataObject)
		{
		}	

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case "Parent":
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
