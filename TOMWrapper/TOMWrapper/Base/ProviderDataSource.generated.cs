
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             Represents a data source that uses a connection string for the connection.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class ProviderDataSource: DataSource
			, IClonableObject
	{
	    protected internal new TOM.ProviderDataSource MetadataObject { get { return base.MetadataObject as TOM.ProviderDataSource; } internal set { base.MetadataObject = value; } }

/// <summary>Gets or sets the connection string to the data source.</summary><returns>A connection containing string to the data source.</returns>
		[DisplayName("Connection String")]
		[Category("Connection Details"),Description(@"Gets or sets the connection string to the data source."),IntelliSense("The Connection String of this ProviderDataSource.")]
		public string ConnectionString {
			get {
			    return MetadataObject.ConnectionString;
			}
			set {
				var oldValue = ConnectionString;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.CONNECTIONSTRING, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ConnectionString = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.CONNECTIONSTRING, oldValue, value));
				OnPropertyChanged(Properties.CONNECTIONSTRING, oldValue, value);
			}
		}
		private bool ShouldSerializeConnectionString() { return false; }
/// <summary>
///             Gets or sets the impersonation mode to connect to the data source. 
///             </summary><returns>The impersonation mode to connect to the data source.</returns>
		[DisplayName("Impersonation Mode")]
		[Category("Connection Details"),Description(@"Gets or sets the impersonation mode to connect to the data source."),IntelliSense("The Impersonation Mode of this ProviderDataSource.")]
		public TOM.ImpersonationMode ImpersonationMode {
			get {
			    return MetadataObject.ImpersonationMode;
			}
			set {
				var oldValue = ImpersonationMode;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.IMPERSONATIONMODE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ImpersonationMode = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.IMPERSONATIONMODE, oldValue, value));
				OnPropertyChanged(Properties.IMPERSONATIONMODE, oldValue, value);
			}
		}
		private bool ShouldSerializeImpersonationMode() { return false; }
/// <summary>Gets or sets the account for the data source.</summary><returns>The account for the data source.</returns>
		[DisplayName("Account")]
		[Category("Connection Details"),Description(@"Gets or sets the account for the data source."),IntelliSense("The Account of this ProviderDataSource.")]
		public string Account {
			get {
			    return MetadataObject.Account;
			}
			set {
				var oldValue = Account;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ACCOUNT, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Account = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ACCOUNT, oldValue, value));
				OnPropertyChanged(Properties.ACCOUNT, oldValue, value);
			}
		}
		private bool ShouldSerializeAccount() { return false; }
/// <summary>Gets or sets the password of the data source provider.</summary><returns>A String containing the password of the data source provider.</returns>
		[DisplayName("Password")]
		[Category("Connection Details"),Description(@"Gets or sets the password of the data source provider."),IntelliSense("The Password of this ProviderDataSource.")]
		public string Password {
			get {
			    return MetadataObject.Password;
			}
			set {
				var oldValue = Password;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.PASSWORD, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Password = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.PASSWORD, oldValue, value));
				OnPropertyChanged(Properties.PASSWORD, oldValue, value);
			}
		}
		private bool ShouldSerializePassword() { return false; }
/// <summary>
///             Gets or sets the maximum number of connections to be opened concurrently to the data source.
///             </summary><returns>The maximum number of connections to be opened concurrently to the data source.</returns>
		[DisplayName("Max Connections")]
		[Category("Connection Details"),Description(@"Gets or sets the maximum number of connections to be opened concurrently to the data source."),IntelliSense("The Max Connections of this ProviderDataSource.")]
		public int MaxConnections {
			get {
			    return MetadataObject.MaxConnections;
			}
			set {
				var oldValue = MaxConnections;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.MAXCONNECTIONS, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.MaxConnections = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.MAXCONNECTIONS, oldValue, value));
				OnPropertyChanged(Properties.MAXCONNECTIONS, oldValue, value);
			}
		}
		private bool ShouldSerializeMaxConnections() { return false; }
/// <summary>
///             Gets or sets the isolation property for a DataSource object.
///             </summary><returns>The data source isolation status.</returns>
		[DisplayName("Isolation")]
		[Category("Connection Details"),Description(@"Gets or sets the isolation property for a DataSource object."),IntelliSense("The Isolation of this ProviderDataSource.")]
		public TOM.DatasourceIsolation Isolation {
			get {
			    return MetadataObject.Isolation;
			}
			set {
				var oldValue = Isolation;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISOLATION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Isolation = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISOLATION, oldValue, value));
				OnPropertyChanged(Properties.ISOLATION, oldValue, value);
			}
		}
		private bool ShouldSerializeIsolation() { return false; }
/// <summary>
///             Gets or sets the timeout in seconds for commands executed against the data source.
///             </summary><returns>The timeout in seconds for commands executed against the data source.</returns>
		[DisplayName("Timeout")]
		[Category("Connection Details"),Description(@"Gets or sets the timeout in seconds for commands executed against the data source."),IntelliSense("The Timeout of this ProviderDataSource.")]
		public int Timeout {
			get {
			    return MetadataObject.Timeout;
			}
			set {
				var oldValue = Timeout;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TIMEOUT, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Timeout = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TIMEOUT, oldValue, value));
				OnPropertyChanged(Properties.TIMEOUT, oldValue, value);
			}
		}
		private bool ShouldSerializeTimeout() { return false; }
/// <summary>Gets or sets the provider of the data source.</summary><returns>The string containing the provider of the data source.</returns>
		[DisplayName("Provider")]
		[Category("Connection Details"),Description(@"Gets or sets the provider of the data source."),IntelliSense("The Provider of this ProviderDataSource.")]
		public string Provider {
			get {
			    return MetadataObject.Provider;
			}
			set {
				var oldValue = Provider;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.PROVIDER, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Provider = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.PROVIDER, oldValue, value));
				OnPropertyChanged(Properties.PROVIDER, oldValue, value);
			}
		}
		private bool ShouldSerializeProvider() { return false; }


		public static ProviderDataSource CreateFromMetadata(TOM.ProviderDataSource metadataObject, bool init = true) {
			var obj = new ProviderDataSource(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}


		/// <summary>
		/// Creates a new ProviderDataSource and adds it to the parent Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static ProviderDataSource CreateNew(Model parent, string name = null)
		{
			var metadataObject = new TOM.ProviderDataSource();
			metadataObject.Name = parent.DataSources.GetNewName(string.IsNullOrWhiteSpace(name) ? "New ProviderDataSource" : name);

			var obj = new ProviderDataSource(metadataObject);

			parent.DataSources.Add(obj);
			
			obj.Init();

			return obj;
		}

		/// <summary>
		/// Creates a new ProviderDataSource and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static ProviderDataSource CreateNew(string name = null)
		{
			var metadataObject = new TOM.ProviderDataSource();
			metadataObject.Name = TabularModelHandler.Singleton.Model.DataSources.GetNewName(string.IsNullOrWhiteSpace(name) ? "New ProviderDataSource" : name);

			var obj = new ProviderDataSource(metadataObject);

			TabularModelHandler.Singleton.Model.DataSources.Add(obj);

			obj.Init();

			return obj;
		}


		/// <summary>
		/// Creates an exact copy of this ProviderDataSource object.
		/// </summary>
		public ProviderDataSource Clone(string newName = null) {
		    Handler.BeginUpdate("Clone ProviderDataSource");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.ProviderDataSource;


			// Assign a new, unique name:
			tom.Name = Parent.DataSources.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject (but don't init until after we add it to the parent):
			var obj = CreateFromMetadata(tom, false);

			// Add the object to the parent collection:
			Parent.DataSources.Add(obj);

			obj.InternalInit();
			obj.Init();


            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.ProviderDataSource;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected ProviderDataSource(TOM.ProviderDataSource metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case Properties.PARENT:
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
