
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             Represents a logical relationship between two Table objects. It is a child of a Model object.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public abstract partial class Relationship: TabularNamedObject
			, IAnnotationObject
	{
	    protected internal new TOM.Relationship MetadataObject { get { return base.MetadataObject as TOM.Relationship; } internal set { base.MetadataObject = value; } }

/// <summary>
///             Gets the destination table in a directional table relationship.
///             </summary><returns>The destination table in a directional table relationship.</returns>
		[DisplayName("To Table")]
		[Category("Other"),Description(@"Gets the destination table in a directional table relationship."),IntelliSense("The To Table of this Relationship.")]
		public Table ToTable {
			get {
				if (MetadataObject.ToTable == null) return null;
			    return Handler.WrapperLookup[MetadataObject.ToTable] as Table;
            }
			
		}
		private bool ShouldSerializeToTable() { return false; }
/// <summary>
///             Gets or sets the starting table in a directional table relationship.
///             </summary><returns>The starting table in a directional table relationship.</returns>
		[DisplayName("From Table")]
		[Category("Other"),Description(@"Gets or sets the starting table in a directional table relationship."),IntelliSense("The From Table of this Relationship.")]
		public Table FromTable {
			get {
				if (MetadataObject.FromTable == null) return null;
			    return Handler.WrapperLookup[MetadataObject.FromTable] as Table;
            }
			
		}
		private bool ShouldSerializeFromTable() { return false; }
        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		/// <summary>
///            Gets or sets a value that indicates whether the column is active.
///             </summary><returns>true if the column is active; otherwise, false.</returns>
		[DisplayName("Active")]
		[Category("Relationship"),Description(@"Gets or sets a value that indicates whether the column is active."),IntelliSense("The Active of this Relationship.")]
		public bool IsActive {
			get {
			    return MetadataObject.IsActive;
			}
			set {
				var oldValue = IsActive;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISACTIVE, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsActive = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISACTIVE, oldValue, value));
				OnPropertyChanged(Properties.ISACTIVE, oldValue, value);
			}
		}
		private bool ShouldSerializeIsActive() { return false; }
/// <summary>
///             Gets the type of the <see cref="T:TabularEditor.TOMWrapper.Relationship" /> object.
///             </summary><returns>The type of the <see cref="T:TabularEditor.TOMWrapper.Relationship" /> object.</returns>
		[DisplayName("Type")]
		[Category("Other"),Description(@"Gets the type of the Relationship object."),IntelliSense("The Type of this Relationship.")]
		public TOM.RelationshipType Type {
			get {
			    return MetadataObject.Type;
			}
			
		}
		private bool ShouldSerializeType() { return false; }
/// <summary>Gets or sets the cross filtering behavior in the relationship.</summary><returns>The cross filtering behavior in the relationship.</returns>
		[DisplayName("Cross Filtering Behavior")]
		[Category("Relationship"),Description(@"Gets or sets the cross filtering behavior in the relationship."),IntelliSense("The Cross Filtering Behavior of this Relationship.")]
		public TOM.CrossFilteringBehavior CrossFilteringBehavior {
			get {
			    return MetadataObject.CrossFilteringBehavior;
			}
			set {
				var oldValue = CrossFilteringBehavior;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.CROSSFILTERINGBEHAVIOR, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.CrossFilteringBehavior = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.CROSSFILTERINGBEHAVIOR, oldValue, value));
				OnPropertyChanged(Properties.CROSSFILTERINGBEHAVIOR, oldValue, value);
			}
		}
		private bool ShouldSerializeCrossFilteringBehavior() { return false; }
/// <summary>
///             Gets or sets the join on date behavior for this property.
///             </summary><returns>The join on date behavior for this property.</returns>
		[DisplayName("Join On Date Behavior")]
		[Category("Other"),Description(@"Gets or sets the join on date behavior for this property."),IntelliSense("The Join On Date Behavior of this Relationship.")]
		public TOM.DateTimeRelationshipBehavior JoinOnDateBehavior {
			get {
			    return MetadataObject.JoinOnDateBehavior;
			}
			set {
				var oldValue = JoinOnDateBehavior;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.JOINONDATEBEHAVIOR, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.JoinOnDateBehavior = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.JOINONDATEBEHAVIOR, oldValue, value));
				OnPropertyChanged(Properties.JOINONDATEBEHAVIOR, oldValue, value);
			}
		}
		private bool ShouldSerializeJoinOnDateBehavior() { return false; }
/// <summary>Gets or sets a value that indicates whether if the object relies on referential integrity.</summary><returns>true if the object relies on referential integrity; otherwise, false.</returns>
		[DisplayName("Rely On Referential Integrity")]
		[Category("Other"),Description(@"Gets or sets a value that indicates whether if the object relies on referential integrity."),IntelliSense("The Rely On Referential Integrity of this Relationship.")]
		public bool RelyOnReferentialIntegrity {
			get {
			    return MetadataObject.RelyOnReferentialIntegrity;
			}
			set {
				var oldValue = RelyOnReferentialIntegrity;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.RELYONREFERENTIALINTEGRITY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.RelyOnReferentialIntegrity = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.RELYONREFERENTIALINTEGRITY, oldValue, value));
				OnPropertyChanged(Properties.RELYONREFERENTIALINTEGRITY, oldValue, value);
			}
		}
		private bool ShouldSerializeRelyOnReferentialIntegrity() { return false; }
/// <summary>
///             Gets or sets the relationship state.
///             </summary><returns>The relationship state.</returns>
		[DisplayName("State")]
		[Category("Metadata"),Description(@"Gets or sets the relationship state."),IntelliSense("The State of this Relationship.")]
		public TOM.ObjectState State {
			get {
			    return MetadataObject.State;
			}
			
		}
		private bool ShouldSerializeState() { return false; }
/// <summary>
///             Gets or sets the security filtering behavior.
///             </summary><returns>The security filtering behavior.</returns>
		[DisplayName("Security Filtering Behavior")]
		[Category("Relationship"),Description(@"Gets or sets the security filtering behavior."),IntelliSense("The Security Filtering Behavior of this Relationship.")]
		public TOM.SecurityFilteringBehavior SecurityFilteringBehavior {
			get {
			    return MetadataObject.SecurityFilteringBehavior;
			}
			set {
				var oldValue = SecurityFilteringBehavior;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.SECURITYFILTERINGBEHAVIOR, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.SecurityFilteringBehavior = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.SECURITYFILTERINGBEHAVIOR, oldValue, value));
				OnPropertyChanged(Properties.SECURITYFILTERINGBEHAVIOR, oldValue, value);
			}
		}
		private bool ShouldSerializeSecurityFilteringBehavior() { return false; }

		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected Relationship(TOM.Relationship metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case Properties.PARENT:
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }


	/// <summary>
	/// Collection class for Relationship. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class RelationshipCollection: TabularObjectCollection<SingleColumnRelationship, TOM.Relationship, TOM.Model>
	{
		public override TabularNamedObject Parent { get { return Model; } }
		public RelationshipCollection(string collectionName, TOM.RelationshipCollection metadataObjectCollection, Model parent) : base(collectionName, metadataObjectCollection)
		{
		}

		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				item.MetadataObject = Model.MetadataObject.Relationships[i + ixOffset] as TOM.SingleColumnRelationship;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			MetadataObjectCollection = Model.MetadataObject.Relationships;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the RelationshipCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				switch((obj as TOM.Relationship).Type) {
					case TOM.RelationshipType.SingleColumn: SingleColumnRelationship.CreateFromMetadata(obj as TOM.SingleColumnRelationship).Collection = this; break;
				}
			}
		}

		[Description("Sets the IsActive property of all objects in the collection at once.")]
		public bool IsActive {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsActive"));
				this.ToList().ForEach(item => { item.IsActive = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the CrossFilteringBehavior property of all objects in the collection at once.")]
		public TOM.CrossFilteringBehavior CrossFilteringBehavior {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("CrossFilteringBehavior"));
				this.ToList().ForEach(item => { item.CrossFilteringBehavior = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the JoinOnDateBehavior property of all objects in the collection at once.")]
		public TOM.DateTimeRelationshipBehavior JoinOnDateBehavior {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("JoinOnDateBehavior"));
				this.ToList().ForEach(item => { item.JoinOnDateBehavior = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the RelyOnReferentialIntegrity property of all objects in the collection at once.")]
		public bool RelyOnReferentialIntegrity {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("RelyOnReferentialIntegrity"));
				this.ToList().ForEach(item => { item.RelyOnReferentialIntegrity = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the SecurityFilteringBehavior property of all objects in the collection at once.")]
		public TOM.SecurityFilteringBehavior SecurityFilteringBehavior {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("SecurityFilteringBehavior"));
				this.ToList().ForEach(item => { item.SecurityFilteringBehavior = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "Relationship" : "Relationships").ToLower());
		}
	}
}
