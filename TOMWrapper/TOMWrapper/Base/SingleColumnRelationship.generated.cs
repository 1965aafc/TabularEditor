// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for SingleColumnRelationship
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class SingleColumnRelationship: Relationship
			, IClonableObject
	{
	    protected internal new TOM.SingleColumnRelationship MetadataObject { get { return base.MetadataObject as TOM.SingleColumnRelationship; } internal set { base.MetadataObject = value; } }

        /// <summary>
        /// Gets or sets the FromColumn of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("From Column")]
		[Category("Relationship"),IntelliSense("The From Column of this SingleColumnRelationship.")][TypeConverter(typeof(AllColumnConverter))]
		public Column FromColumn {
			get {
				if (MetadataObject.FromColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.FromColumn] as Column;
            }
			set {
				var oldValue = FromColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("FromColumn", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "FromColumn", oldValue, value));
				OnPropertyChanged("FromColumn", oldValue, value);
			}
		}
		private bool ShouldSerializeFromColumn() { return false; }
        /// <summary>
        /// Gets or sets the ToColumn of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("To Column")]
		[Category("Relationship"),IntelliSense("The To Column of this SingleColumnRelationship.")][TypeConverter(typeof(AllColumnConverter))]
		public Column ToColumn {
			get {
				if (MetadataObject.ToColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.ToColumn] as Column;
            }
			set {
				var oldValue = ToColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ToColumn", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ToColumn", oldValue, value));
				OnPropertyChanged("ToColumn", oldValue, value);
			}
		}
		private bool ShouldSerializeToColumn() { return false; }
        /// <summary>
        /// Gets or sets the FromCardinality of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("From Cardinality")]
		[Category("Other"),IntelliSense("The From Cardinality of this SingleColumnRelationship.")]
		public TOM.RelationshipEndCardinality FromCardinality {
			get {
			    return MetadataObject.FromCardinality;
			}
			set {
				var oldValue = FromCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("FromCardinality", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromCardinality = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "FromCardinality", oldValue, value));
				OnPropertyChanged("FromCardinality", oldValue, value);
			}
		}
		private bool ShouldSerializeFromCardinality() { return false; }
        /// <summary>
        /// Gets or sets the ToCardinality of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("To Cardinality")]
		[Category("Other"),IntelliSense("The To Cardinality of this SingleColumnRelationship.")]
		public TOM.RelationshipEndCardinality ToCardinality {
			get {
			    return MetadataObject.ToCardinality;
			}
			set {
				var oldValue = ToCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ToCardinality", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToCardinality = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ToCardinality", oldValue, value));
				OnPropertyChanged("ToCardinality", oldValue, value);
			}
		}
		private bool ShouldSerializeToCardinality() { return false; }



		/// <summary>
		/// Creates a new SingleColumnRelationship and adds it to the parent Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public SingleColumnRelationship(Model parent, string name = null) : this(new TOM.SingleColumnRelationship()) {
			
			MetadataObject.Name = GetNewName(parent.MetadataObject.Relationships, string.IsNullOrWhiteSpace(name) ? "New SingleColumnRelationship" : name);

			parent.Relationships.Add(this);
		}

		/// <summary>
		/// Creates a new SingleColumnRelationship and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public SingleColumnRelationship() : this(TabularModelHandler.Singleton.Model) { }


		/// <summary>
		/// Creates an exact copy of this SingleColumnRelationship object.
		/// </summary>
		public SingleColumnRelationship Clone(string newName = null) {
		    Handler.BeginUpdate("Clone SingleColumnRelationship");

				// Create a clone of the underlying metadataobject:
				var tom = MetadataObject.Clone() as TOM.SingleColumnRelationship;

				// Assign a new, unique name:
				tom.Name = Parent.Relationships.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
				// Create the TOM Wrapper object, representing the metadataobject:
				var obj = new SingleColumnRelationship(tom);

				// Add the object to the parent collection:
				Parent.Relationships.Add(obj);



            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.SingleColumnRelationship();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}

		/// <summary>
		/// Creates a SingleColumnRelationship object representing an existing TOM SingleColumnRelationship.
		/// </summary>
		internal SingleColumnRelationship(TOM.SingleColumnRelationship metadataObject) : base(metadataObject)
		{
		}	

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case "Parent":
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
