// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for SingleColumnRelationship
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class SingleColumnRelationship: Relationship
	{
	    protected internal new TOM.SingleColumnRelationship MetadataObject { get { return base.MetadataObject as TOM.SingleColumnRelationship; } internal set { base.MetadataObject = value; } }


		public SingleColumnRelationship(TabularModelHandler handler, TOM.SingleColumnRelationship singlecolumnrelationshipMetadataObject) : base(handler, singlecolumnrelationshipMetadataObject)
		{
		}
        /// <summary>
        /// Gets or sets the FromColumn of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("From Column")]
		[Category("Other"),IntelliSense("The From Column of this SingleColumnRelationship.")]
		public Column FromColumn {
			get {
				if (MetadataObject.FromColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.FromColumn] as Column;
            }
			set {
				var oldValue = FromColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("FromColumn", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "FromColumn", oldValue, value));
				OnPropertyChanged("FromColumn", oldValue, value);
			}
		}
		private bool ShouldSerializeFromColumn() { return false; }
        /// <summary>
        /// Gets or sets the ToColumn of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("To Column")]
		[Category("Other"),IntelliSense("The To Column of this SingleColumnRelationship.")]
		public Column ToColumn {
			get {
				if (MetadataObject.ToColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.ToColumn] as Column;
            }
			set {
				var oldValue = ToColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ToColumn", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ToColumn", oldValue, value));
				OnPropertyChanged("ToColumn", oldValue, value);
			}
		}
		private bool ShouldSerializeToColumn() { return false; }
        /// <summary>
        /// Gets or sets the FromCardinality of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("From Cardinality")]
		[Category("Other"),IntelliSense("The From Cardinality of this SingleColumnRelationship.")]
		public TOM.RelationshipEndCardinality FromCardinality {
			get {
			    return MetadataObject.FromCardinality;
			}
			set {
				var oldValue = FromCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("FromCardinality", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromCardinality = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "FromCardinality", oldValue, value));
				OnPropertyChanged("FromCardinality", oldValue, value);
			}
		}
		private bool ShouldSerializeFromCardinality() { return false; }
        /// <summary>
        /// Gets or sets the ToCardinality of the SingleColumnRelationship.
        /// </summary>
		[DisplayName("To Cardinality")]
		[Category("Other"),IntelliSense("The To Cardinality of this SingleColumnRelationship.")]
		public TOM.RelationshipEndCardinality ToCardinality {
			get {
			    return MetadataObject.ToCardinality;
			}
			set {
				var oldValue = ToCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ToCardinality", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToCardinality = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ToCardinality", oldValue, value));
				OnPropertyChanged("ToCardinality", oldValue, value);
			}
		}
		private bool ShouldSerializeToCardinality() { return false; }
    }
}
