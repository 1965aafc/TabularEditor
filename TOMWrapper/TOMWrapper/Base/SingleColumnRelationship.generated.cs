
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	/// <summary>
///             SingleColumnRelationship object.
///             </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class SingleColumnRelationship: Relationship
			, IClonableObject
	{
	    protected internal new TOM.SingleColumnRelationship MetadataObject { get { return base.MetadataObject as TOM.SingleColumnRelationship; } internal set { base.MetadataObject = value; } }

/// <summary>
///             Gets or sets the starting column in a single column relationship.
///             </summary><returns>The starting column in a single column relationship.</returns>
		[DisplayName("From Column")]
		[Category("Relationship"),Description(@"Gets or sets the starting column in a single column relationship."),IntelliSense("The From Column of this SingleColumnRelationship.")][TypeConverter(typeof(AllColumnConverter))]
		public Column FromColumn {
			get {
				if (MetadataObject.FromColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.FromColumn] as Column;
            }
			set {
				var oldValue = FromColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.FROMCOLUMN, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.FROMCOLUMN, oldValue, value));
				OnPropertyChanged(Properties.FROMCOLUMN, oldValue, value);
			}
		}
		private bool ShouldSerializeFromColumn() { return false; }
/// <summary>
///             Gets or sets the destination column in a single column relationship.
///             </summary><returns>The destination column in a single column relationship.</returns>
		[DisplayName("To Column")]
		[Category("Relationship"),Description(@"Gets or sets the destination column in a single column relationship."),IntelliSense("The To Column of this SingleColumnRelationship.")][TypeConverter(typeof(AllColumnConverter))]
		public Column ToColumn {
			get {
				if (MetadataObject.ToColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.ToColumn] as Column;
            }
			set {
				var oldValue = ToColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TOCOLUMN, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToColumn = value?.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TOCOLUMN, oldValue, value));
				OnPropertyChanged(Properties.TOCOLUMN, oldValue, value);
			}
		}
		private bool ShouldSerializeToColumn() { return false; }
/// <summary>
///             Gets or sets the relationship from cardinality.
///             </summary><returns>The relationship from cardinality.</returns>
		[DisplayName("From Cardinality")]
		[Category("Other"),Description(@"Gets or sets the relationship from cardinality."),IntelliSense("The From Cardinality of this SingleColumnRelationship.")]
		public RelationshipEndCardinality FromCardinality {
			get {
			    return (RelationshipEndCardinality)MetadataObject.FromCardinality;
			}
			set {
				var oldValue = FromCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.FROMCARDINALITY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.FromCardinality = (TOM.RelationshipEndCardinality)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.FROMCARDINALITY, oldValue, value));
				OnPropertyChanged(Properties.FROMCARDINALITY, oldValue, value);
			}
		}
		private bool ShouldSerializeFromCardinality() { return false; }
/// <summary>Gets or sets the end of the cardinality relationship.</summary><returns>The end of the cardinality relationship.</returns>
		[DisplayName("To Cardinality")]
		[Category("Other"),Description(@"Gets or sets the end of the cardinality relationship."),IntelliSense("The To Cardinality of this SingleColumnRelationship.")]
		public RelationshipEndCardinality ToCardinality {
			get {
			    return (RelationshipEndCardinality)MetadataObject.ToCardinality;
			}
			set {
				var oldValue = ToCardinality;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.TOCARDINALITY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ToCardinality = (TOM.RelationshipEndCardinality)value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.TOCARDINALITY, oldValue, value));
				OnPropertyChanged(Properties.TOCARDINALITY, oldValue, value);
			}
		}
		private bool ShouldSerializeToCardinality() { return false; }


		public static SingleColumnRelationship CreateFromMetadata(TOM.SingleColumnRelationship metadataObject, bool init = true) {
			var obj = new SingleColumnRelationship(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}


		/// <summary>
		/// Creates a new SingleColumnRelationship and adds it to the parent Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static SingleColumnRelationship CreateNew(Model parent, string name = null)
		{
			var metadataObject = new TOM.SingleColumnRelationship();
			metadataObject.Name = parent.Relationships.GetNewName(string.IsNullOrWhiteSpace(name) ? "New SingleColumnRelationship" : name);

			var obj = new SingleColumnRelationship(metadataObject);

			parent.Relationships.Add(obj);
			
			obj.Init();

			return obj;
		}

		/// <summary>
		/// Creates a new SingleColumnRelationship and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static SingleColumnRelationship CreateNew(string name = null)
		{
			var metadataObject = new TOM.SingleColumnRelationship();
			metadataObject.Name = TabularModelHandler.Singleton.Model.Relationships.GetNewName(string.IsNullOrWhiteSpace(name) ? "New SingleColumnRelationship" : name);

			var obj = new SingleColumnRelationship(metadataObject);

			TabularModelHandler.Singleton.Model.Relationships.Add(obj);

			obj.Init();

			return obj;
		}


		/// <summary>
		/// Creates an exact copy of this SingleColumnRelationship object.
		/// </summary>
		public SingleColumnRelationship Clone(string newName = null) {
		    Handler.BeginUpdate("Clone SingleColumnRelationship");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.SingleColumnRelationship;


			// Assign a new, unique name:
			tom.Name = Parent.Relationships.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject (but don't init until after we add it to the parent):
			var obj = CreateFromMetadata(tom, false);

			// Add the object to the parent collection:
			Parent.Relationships.Add(obj);

			obj.InternalInit();
			obj.Init();


            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.SingleColumnRelationship;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected SingleColumnRelationship(TOM.SingleColumnRelationship metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case Properties.PARENT:
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

}
