// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
  
    /// <summary>
	/// Base class declaration for StructuredDataSource
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class StructuredDataSource: DataSource, IClonableObject
	{
	    protected internal new TOM.StructuredDataSource MetadataObject { get { return base.MetadataObject as TOM.StructuredDataSource; } internal set { base.MetadataObject = value; } }

        /// <summary>
        /// Gets or sets the ContextExpression of the StructuredDataSource.
        /// </summary>
		[DisplayName("Context Expression")]
		[Category("Other"),IntelliSense("The Context Expression of this StructuredDataSource.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string ContextExpression {
			get {
			    return MetadataObject.ContextExpression;
			}
			set {
				var oldValue = ContextExpression;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging("ContextExpression", value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.ContextExpression = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, "ContextExpression", oldValue, value));
				OnPropertyChanged("ContextExpression", oldValue, value);
			}
		}
		private bool ShouldSerializeContextExpression() { return false; }



		/// <summary>
		/// Creates a new StructuredDataSource and adds it to the parent Model.
		/// </summary>
		public StructuredDataSource(Model parent) : this(new TOM.StructuredDataSource()) {
			MetadataObject.Name = parent.MetadataObject.DataSources.GetNewName("New StructuredDataSource");
			parent.DataSources.Add(this);
		}

		
		public StructuredDataSource() : this(TabularModelHandler.Singleton.Model) { }


		public StructuredDataSource Clone(string newName = null) {
		    Handler.BeginUpdate("Clone StructuredDataSource");

				var tom = MetadataObject.Clone() as TOM.StructuredDataSource;
				tom.Name = Parent.DataSources.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				var obj = new StructuredDataSource(tom);

            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations) {
			if (includeTranslations) throw new ArgumentException("This object does not support translations.", "includeTranslations");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.StructuredDataSource();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }


		public Model Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Model;
			}
		}
		
		/// <summary>
		/// Creates a StructuredDataSource object representing an existing TOM StructuredDataSource.
		/// </summary>
		internal StructuredDataSource(TOM.StructuredDataSource metadataObject) : base(metadataObject)
		{
			
		}	
    }
}
