
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
  
	
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public partial class Variation: TabularNamedObject
			, IDescriptionObject
			, IAnnotationObject
			, IClonableObject
	{
	    protected internal new TOM.Variation MetadataObject { get { return base.MetadataObject as TOM.Variation; } internal set { base.MetadataObject = value; } }

        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		
		[DisplayName("Description")]
		[Category("Basic"),Description(@""),IntelliSense("The Description of this Variation.")][Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		public string Description {
			get {
			    return MetadataObject.Description;
			}
			set {
				var oldValue = Description;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DESCRIPTION, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Description = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DESCRIPTION, oldValue, value));
				OnPropertyChanged(Properties.DESCRIPTION, oldValue, value);
			}
		}
		private bool ShouldSerializeDescription() { return false; }

		[DisplayName("Default")]
		[Category("Variation Options"),Description(@""),IntelliSense("The Default of this Variation.")]
		public bool IsDefault {
			get {
			    return MetadataObject.IsDefault;
			}
			set {
				var oldValue = IsDefault;
				if (oldValue == value) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ISDEFAULT, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.IsDefault = value;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.ISDEFAULT, oldValue, value));
				OnPropertyChanged(Properties.ISDEFAULT, oldValue, value);
			}
		}
		private bool ShouldSerializeIsDefault() { return false; }

		[DisplayName("Parent Column")]
		[Category("Basic"),Description(@""),IntelliSense("The Parent Column of this Variation.")][TypeConverter(typeof(TableColumnConverter)),ReadOnly(true)]
		public Column Column {
			get {
				if (MetadataObject.Column == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Column] as Column;
            }
			
		}
		private bool ShouldSerializeColumn() { return false; }

		[DisplayName("Relationship")]
		[Category("Variation Options"),Description(@""),IntelliSense("The Relationship of this Variation.")][TypeConverter(typeof(AllRelationshipConverter))]
		public Relationship Relationship {
			get {
				if (MetadataObject.Relationship == null) return null;
			    return Handler.WrapperLookup[MetadataObject.Relationship] as Relationship;
            }
			set {
				var oldValue = Relationship;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.RELATIONSHIP, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.Relationship = value == null ? null : value.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.RELATIONSHIP, oldValue, value));
				OnPropertyChanged(Properties.RELATIONSHIP, oldValue, value);
			}
		}
		private bool ShouldSerializeRelationship() { return false; }

		[DisplayName("Default Hierarchy")]
		[Category("Variation Options"),Description(@""),IntelliSense("The Default Hierarchy of this Variation.")][TypeConverter(typeof(AllHierarchyConverter))]
		public Hierarchy DefaultHierarchy {
			get {
				if (MetadataObject.DefaultHierarchy == null) return null;
			    return Handler.WrapperLookup[MetadataObject.DefaultHierarchy] as Hierarchy;
            }
			set {
				var oldValue = DefaultHierarchy;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DEFAULTHIERARCHY, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DefaultHierarchy = value == null ? null : value.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DEFAULTHIERARCHY, oldValue, value));
				OnPropertyChanged(Properties.DEFAULTHIERARCHY, oldValue, value);
			}
		}
		private bool ShouldSerializeDefaultHierarchy() { return false; }

		[DisplayName("Default Column")]
		[Category("Variation Options"),Description(@""),IntelliSense("The Default Column of this Variation.")][TypeConverter(typeof(AllColumnConverter))]
		public Column DefaultColumn {
			get {
				if (MetadataObject.DefaultColumn == null) return null;
			    return Handler.WrapperLookup[MetadataObject.DefaultColumn] as Column;
            }
			set {
				var oldValue = DefaultColumn;
				if (oldValue?.MetadataObject == value?.MetadataObject) return;
				bool undoable = true;
				bool cancel = false;
				OnPropertyChanging(Properties.DEFAULTCOLUMN, value, ref undoable, ref cancel);
				if (cancel) return;
				MetadataObject.DefaultColumn = value == null ? null : value.MetadataObject;
				if(undoable) Handler.UndoManager.Add(new UndoPropertyChangedAction(this, Properties.DEFAULTCOLUMN, oldValue, value));
				OnPropertyChanged(Properties.DEFAULTCOLUMN, oldValue, value);
			}
		}
		private bool ShouldSerializeDefaultColumn() { return false; }


		public static Variation CreateFromMetadata(TOM.Variation metadataObject, bool init = true) {
			var obj = new Variation(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}


		/// <summary>
		/// Creates a new Variation and adds it to the parent Column.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static Variation CreateNew(Column parent, string name = null)
		{
			var metadataObject = new TOM.Variation();
			metadataObject.Name = parent.Variations.GetNewName(string.IsNullOrWhiteSpace(name) ? "New Variation" : name);

			var obj = new Variation(metadataObject);

			parent.Variations.Add(obj);
			
			obj.Init();

			return obj;
		}


		/// <summary>
		/// Creates an exact copy of this Variation object.
		/// </summary>
		public Variation Clone(string newName = null, Column newParent = null) {
		    Handler.BeginUpdate("Clone Variation");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.Variation;


			// Assign a new, unique name:
			tom.Name = Parent.Variations.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject (but don't init until after we add it to the parent):
			var obj = CreateFromMetadata(tom, false);

			// Add the object to the parent collection:
			if(newParent != null) 
				newParent.Variations.Add(obj);
			else
    			Parent.Variations.Add(obj);

			obj.InternalInit();
			obj.Init();


            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
			return Clone(newName);
		}

	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.Variation;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

		public Column Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as Column;
			}
		}



		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected Variation(TOM.Variation metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
		}



		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
				case Properties.PARENT:
					return false;
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }


	/// <summary>
	/// Collection class for Variation. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class VariationCollection: TabularObjectCollection<Variation, TOM.Variation, TOM.Column>
	{
		public override TabularNamedObject Parent { get { return Column; } }
		public Column Column { get; protected set; }
		public VariationCollection(string collectionName, TOM.VariationCollection metadataObjectCollection, Column parent) : base(collectionName, metadataObjectCollection)
		{
			Column = parent;
		}

		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				item.MetadataObject = Column.MetadataObject.Variations[i + ixOffset] as TOM.Variation;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			MetadataObjectCollection = Column.MetadataObject.Variations;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the VariationCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
				Variation.CreateFromMetadata(obj).Collection = this;
			}
		}

		[Description("Sets the Description property of all objects in the collection at once.")]
		public string Description {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Description"));
				this.ToList().ForEach(item => { item.Description = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the IsDefault property of all objects in the collection at once.")]
		public bool IsDefault {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("IsDefault"));
				this.ToList().ForEach(item => { item.IsDefault = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the Relationship property of all objects in the collection at once.")]
		public Relationship Relationship {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("Relationship"));
				this.ToList().ForEach(item => { item.Relationship = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DefaultHierarchy property of all objects in the collection at once.")]
		public Hierarchy DefaultHierarchy {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DefaultHierarchy"));
				this.ToList().ForEach(item => { item.DefaultHierarchy = value; });
				Handler.UndoManager.EndBatch();
			}
		}
		[Description("Sets the DefaultColumn property of all objects in the collection at once.")]
		public Column DefaultColumn {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("DefaultColumn"));
				this.ToList().ForEach(item => { item.DefaultColumn = value; });
				Handler.UndoManager.EndBatch();
			}
		}

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "Variation" : "Variations").ToLower());
		}
	}
}
