<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.AnalysisServices.Tabular, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AnalysisServices.Tabular" #>
<#@include file="Manager.ttinclude"#>
<#@include file="Rules.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
<# manager.EndBlock();
 
   foreach(var t in Rules.ObjectTypes.Keys) {
	   manager.StartNewFile(t.Name + ".generated.cs");
	   var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
#>  
    /// <summary>
	/// Base class declaration for <#= t.Name #>
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public <#= t.IsAbstract ? "abstract " : "" #>partial class <#= t.Name #>: <#= Rules.ObjectTypes[t]
#><#= props.Any(p => p.Name == "DisplayFolder") ? "\n\t\t\t, IDetailObject" : ""
#><#= props.Any(p => p.Name == "IsHidden") ? "\n\t\t\t, IHideableObject" : ""
#><#= props.Any(p => p.Name == "ErrorMessage") ? "\n\t\t\t, IErrorMessageObject" : ""
#><#= props.Any(p => p.Name == "Table") ? "\n\t\t\t, ITabularTableObject" : ""
#><#= props.Any(p => p.Name == "Description") ? "\n\t\t\t, IDescriptionObject" : ""
#><#= props.Any(p => p.Name == "Expression") ? "\n\t\t\t, IExpressionObject" : ""
#><#= props.Any(p => p.Name == "Annotations") ? "\n\t\t\t, IAnnotationObject" : ""
#><#= Rules.IsPerspectiveObject(t) ? "\n\t\t\t, ITabularPerspectiveObject" : ""
#><#= Rules.IsTranslatable(t) ? "\n\t\t\t, ITranslatableObject" : ""
#><#= Rules.InCollection(t) && !t.IsAbstract ? "\n\t\t\t, IClonableObject" : ""
#>
	{
	    protected internal new TOM.<#= t.Name #> MetadataObject { get { return base.MetadataObject as TOM.<#= t.Name #>; } internal set { base.MetadataObject = value; } }

<#
	foreach(PropertyInfo p in props) 
	{   
		if (p.Name == "Annotations") { #>
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.Find(name)?.Value;
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				MetadataObject.Annotations[name].Value = value;
			} else {
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
			}
			if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value));
		}
		<# }

		if (Rules.ShouldWrapProperty(p, t)) { #>
        /// <summary>
        /// Gets or sets the <#= p.Name #> of the <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(p.Name, t.Name) #>")]
		[Category("<#= Rules.GetCategory(p.Name, t) #>"),IntelliSense("The <#= Rules.GetDisplayName(p.Name, t.Name) #> of this <#= t.Name #>.")]<#= Rules.GetOtherAttributes(p.Name, t.Name) #>
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			<#= Rules.PropertyGetter(p) #>
			<#= Rules.PropertySetter(p) #>
		}
		private bool ShouldSerialize<#= p.Name #>() { return false; }
<#		}
		if (p.Name == "DisplayFolder") { #>
        /// <summary>
        /// Collection of localized Display Folders for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Display Folders"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDisplayFolders { private set; get; }
<#		}
		if (p.Name == "Table") { #>
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
<#      }
	}#>

<# if (Rules.IsPerspectiveObject(t)) { #>
        /// <Summary>
		/// Collection of perspectives in which this <#= t.Name #> is visible.
		/// </Summary>
		[Browsable(true),DisplayName("Perspectives"), Category("Translations and Perspectives")]
        public PerspectiveIndexer InPerspective { get; private set; }
<# } if (Rules.IsTranslatable(t)) { #>
        /// <summary>
        /// Collection of localized descriptions for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Names"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedNames { private set; get; }

<# } if (!t.IsAbstract) { #>

<# if(Rules.InCollection(t)) { #>

		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the parent <#= Rules.GetParent(t) #>.
		/// </summary>
		public <#= t.Name #>(<#= Rules.GetParent(t) #> parent, string name = null) : this(new TOM.<#= t.Name #>()) {
			
			MetadataObject.Name = GetNewName(parent.MetadataObject.<#= Rules.GetCollection(t) #>, string.IsNullOrWhiteSpace(name) ? "New <#= t.Name #>" : name);

			parent.<#= Rules.GetCollection(t) #>.Add(this);
		}

<# // Create parameterless constructors for objects at Model scope (perspectives, roles, etc.)
if(Rules.GetParent(t) == "Model") { #>
		
		public <#= t.Name #>() : this(TabularModelHandler.Singleton.Model) { }

<# } #>

		/// <summary>
		/// Creates an exact copy of this <#= t.Name #> object.
		/// </summary>
		/// 
		public <#= t.Name #> Clone(string newName = null<#= 
Rules.IsTranslatable(t, true) ? ", bool includeTranslations = true" : "" #><#=
Rules.GetParent(t) != "Model" ? ", " + Rules.GetParent(t) + " newParent = null" : "" #>) {
		    Handler.BeginUpdate("Clone <#= t.Name #>");

				// Create a clone of the underlying metadataobject:
				var tom = MetadataObject.Clone() as TOM.<#= t.Name #>;

				// Assign a new, unique name:
				tom.Name = Parent.<#= Rules.GetCollection(t) #>.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
				// Create the TOM Wrapper object, representing the metadataobject:
				var obj = new <#= t.Name #>(tom);

				// Add the object to the parent collection:
<# if (Rules.GetParent(t) != "Model") { #>
				if(newParent != null) 
					newParent.<#= Rules.GetCollection(t)#>.Add(obj);
				else
    <# } #>				Parent.<#= Rules.GetCollection(t)#>.Add(obj);

<# if (Rules.IsTranslatable(t, true)) { #>
				// Copy translations, if applicable:
				if(includeTranslations) {
					obj.TranslatedNames.CopyFrom(TranslatedNames);
					obj.TranslatedDescriptions.CopyFrom(TranslatedDescriptions);
<#     if (Rules.HasDisplayFolder(t)) { #>
					obj.TranslatedDisplayFolders.CopyFrom(TranslatedDisplayFolders);
<#     } #>
				}
<# } if (Rules.IsPerspectiveObject(t, true)) { #>
				
				// Copy perspectives:
				obj.InPerspective.CopyFrom(InPerspective);
<# } #>


            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
<# if (!Rules.IsTranslatable(t, true)) { #>
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
<# } if (Rules.GetParent(t) == "Model") { #>
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
<# } #>
			return Clone(newName<#= Rules.IsTranslatable(t) ? ", includeTranslations" : "" #>);
		}

<# } #>
	
        internal override void RenewMetadataObject()
        {
            var tom = new TOM.<#= t.Name #>();
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject.CopyTo(tom);
            MetadataObject = tom;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

<# } if (Rules.InCollection(t)) { #>

		public <#= Rules.GetParent(t) #> Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as <#= Rules.GetParent(t) #>;
			}
		}
<# } #>

		/// <summary>
		/// Creates a <#= t.Name #> object representing an existing TOM <#= t.Name #>.
		/// </summary>
		internal <#= t.Name #>(TOM.<#= t.Name #> metadataObject) : base(metadataObject)
		{
<# if(Rules.IsTranslatable(t)) { #>
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
<# } if(props.Any(p => p.Name == "DisplayFolder")) { #>
			TranslatedDisplayFolders = new TranslationIndexer(this, TOM.TranslatedProperty.DisplayFolder);
<# } if(Rules.IsPerspectiveObject(t)) { #>
			InPerspective = new Perspective<#= t.Name #>Indexer(this);
<# }#>
		}	

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
<# if(Rules.InCollection(t)) { #>
				case "Parent":
					return false;
<# } if(Rules.IsTranslatable(t)) { #>
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case "TranslatedNames":
				case "TranslatedDescriptions":
<#     if(Rules.HasDisplayFolder(t)) { #>
				case "TranslatedDisplayFolders":
<#     } #>
					return Model.Cultures.Any();
<# } if(Rules.IsPerspectiveObject(t)) { #>
				
				// Hides the perspective property in the grid, unless the model actually contains perspectives:
				case "InPerspective":
					return Model.Perspectives.Any();
<# } #>
				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

<#  if (Rules.CollectionParent.ContainsKey(t)) { #>

	/// <summary>
	/// Collection class for <#= t.Name #>. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class <#= t.Name #>Collection: TabularObjectCollection<<#= t.Name #>, TOM.<#= t.Name #>, TOM.<#= Rules.CollectionParent[t] #>>
	{
		public <#= Rules.CollectionParent[t] #> Parent { get; private set; }

		public <#= t.Name #>Collection(string collectionName, TOM.<#= t.Name #>Collection metadataObjectCollection, <#= Rules.CollectionParent[t] #> parent) : base(collectionName, metadataObjectCollection)
		{
			Parent = parent;

			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
<# if(t.Name == "ModelRoleMember") { #>
				if(obj is TOM.WindowsModelRoleMember) new WindowsModelRoleMember(obj as TOM.WindowsModelRoleMember) { Collection = this };
				if(obj is TOM.ExternalModelRoleMember) new ExternalModelRoleMember(obj as TOM.ExternalModelRoleMember) { Collection = this };
<# } else if(t.Name == "Column") { #>
				switch(obj.Type) {
				    case TOM.ColumnType.Data: new DataColumn(obj as TOM.DataColumn) { Collection = this }; break;
					case TOM.ColumnType.Calculated: new CalculatedColumn(obj as TOM.CalculatedColumn) { Collection = this }; break;
					case TOM.ColumnType.CalculatedTableColumn: new CalculatedTableColumn(obj as TOM.CalculatedTableColumn) { Collection = this }; break;
					default: break;
				}
<# } else if (t.Name == "Table") { #>
				switch(obj.GetSourceType()) {
				    case TOM.PartitionSourceType.Calculated: new CalculatedTable(obj) { Collection = this }; break;
					default: new Table(obj) { Collection = this }; break;
				}
<# } else if (t.Name == "Relationship") { #>
				switch((obj as TOM.Relationship).Type) {
					case TOM.RelationshipType.SingleColumn: new SingleColumnRelationship(obj as TOM.SingleColumnRelationship) { Collection = this }; break;
				}
<# } else if (t.Name == "DataSource") { #>
				switch((obj as TOM.DataSource).Type) {
					case TOM.DataSourceType.Provider: new ProviderDataSource(obj as TOM.ProviderDataSource) { Collection = this }; break;
#if CL1400
					case TOM.DataSourceType.Structured: new StructuredDataSource(obj as TOM.StructuredDataSource) { Collection = this }; break;
#endif
				}
<# } else { #>
				new <#= t.Name #>(obj) { Collection = this };
<# } #>
			}
		}

<#      /*foreach(PropertyInfo p in props) { 
            if ((Rules.Aliases.ContainsKey(p.PropertyType) || p.PropertyType.IsEnum)
			    && p.SetMethod != null && p.SetMethod.IsPublic
				&& p.Name != "Name" && p.Name != "IsKey" && p.Name != "TableDetailPosition" && p.Name != "ObjectType"
				&& !p.Name.Contains("Ordinal") && !p.Name.Contains("IsDefault"))*/
   
		foreach(PropertyInfo p in props) 
		{   
			if (Rules.ShouldWrapCollectionProperty(p, t)) { #>
		[Description("Sets the <#= p.Name #> property of all objects in the collection at once.")]
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("<#= p.Name #>"));
				this.ToList().ForEach(item => { item.<#= p.Name #> = value; });
				Handler.UndoManager.EndBatch();
			}
		}
<#          }
        } #>

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "<#= t.Name #>" : "<#= t == typeof(Column) ? "Columns" : Rules.Collections[t]#>").ToLower());
		}
	}
<#  } #>
<#
       manager.EndBlock();
    }
#>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>