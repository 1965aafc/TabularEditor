<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.AnalysisServices.Tabular, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AnalysisServices.Tabular" #>
<#@include file="Manager.ttinclude"#>
<#@include file="Rules.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>

// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
<# manager.EndBlock();
 
   foreach(var t in Rules.ObjectTypes.Keys) {
	   manager.StartNewFile(t.Name + ".generated.cs");
	   var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
#>  
    /// <summary>
	/// Base class declaration for <#= t.Name #>
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public <#= t.IsAbstract ? "abstract " : "" #>partial class <#= t.Name #>: <#= Rules.ObjectTypes[t]
#><#= props.Any(p => p.Name == "DisplayFolder") ? "\n\t\t\t, IDetailObject" : ""
#><#= props.Any(p => p.Name == "IsHidden") ? "\n\t\t\t, IHideableObject" : ""
#><#= props.Any(p => p.Name == "ErrorMessage") ? "\n\t\t\t, IErrorMessageObject" : ""
#><#= props.Any(p => p.Name == "Table") ? "\n\t\t\t, ITabularTableObject" : ""
#><#= props.Any(p => p.Name == "Description") ? "\n\t\t\t, IDescriptionObject" : ""
#><#= props.Any(p => p.Name == "Expression") ? "\n\t\t\t, IDAXExpressionObject" : ""
#><#= props.Any(p => p.Name == "Annotations") ? "\n\t\t\t, IAnnotationObject" : ""
#><#= Rules.IsPerspectiveObject(t) ? "\n\t\t\t, ITabularPerspectiveObject" : ""
#><#= Rules.IsTranslatable(t) ? "\n\t\t\t, ITranslatableObject" : ""
#><#= Rules.InCollection(t) && !t.IsAbstract ? "\n\t\t\t, IClonableObject" : ""
#>
	{
	    protected internal new TOM.<#= t.Name #> MetadataObject { get { return base.MetadataObject as TOM.<#= t.Name #>; } internal set { base.MetadataObject = value; } }

<#
	foreach(PropertyInfo p in props) 
	{   
		if (p.Name == "Annotations") { #>
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.Find(name)?.Value;
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				MetadataObject.Annotations[name].Value = value;
			} else {
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
			}
			if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value));
		}
		<# }

		if (Rules.ShouldWrapProperty(p, t)) { #>
        /// <summary>
        /// Gets or sets the <#= p.Name #> of the <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(p.Name, t.Name) #>")]
		[Category("<#= Rules.GetCategory(p.Name, t.Name) #>"),IntelliSense("The <#= Rules.GetDisplayName(p.Name, t.Name) #> of this <#= t.Name #>.")]<#= Rules.GetOtherAttributes(p.Name, t.Name) #>
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			<#= Rules.PropertyGetter(p) #>
			<#= Rules.PropertySetter(p) #>
		}
		private bool ShouldSerialize<#= p.Name #>() { return false; }
<#		}
		if (p.Name == "DisplayFolder") { #>
        /// <summary>
        /// Collection of localized Display Folders for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Display Folders"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDisplayFolders { private set; get; }
<#		}
		if (p.Name == "Table") { #>
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
<#      }
	}#>
<# if (Rules.IsPerspectiveObject(t)) { #>
        /// <Summary>
		/// Collection of perspectives in which this <#= t.Name #> is visible.
		/// </Summary>
		[Browsable(true),DisplayName("Perspectives"), Category("Translations and Perspectives")]
        public PerspectiveIndexer InPerspective { get; private set; }
<# } if (Rules.IsTranslatable(t)) { #>
        /// <summary>
        /// Collection of localized descriptions for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Names"),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedNames { private set; get; }

<# } if (!t.IsAbstract) { #>

		public static <#= t.Name #> CreateFromMetadata(TOM.<#= t.Name #> metadataObject, bool init = true) {
			var obj = new <#= t.Name #>(metadataObject, init);
			if(init) 
			{
				obj.InternalInit();
				obj.Init();
			}
			return obj;
		}

<# if(Rules.InCollection(t)) { #>

		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the parent <#= Rules.GetParent(t) #>.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static <#= t.Name #> CreateNew(<#= Rules.GetParent(t) #> parent, string name = null)
		{
			var metadataObject = new TOM.<#= t.Name #>();
			metadataObject.Name = parent.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrWhiteSpace(name) ? "New <#= t.Name #>" : name);

			var obj = new <#= t.Name #>(metadataObject);

			parent.<#= Rules.GetCollection(t) #>.Add(obj);
			
			obj.Init();

			return obj;
		}

<# // Create parameterless constructors for objects at Model scope (perspectives, roles, etc.)
if(Rules.GetParent(t) == "Model") { #>
		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static <#= t.Name #> CreateNew(string name = null)
		{
			var metadataObject = new TOM.<#= t.Name #>();
			metadataObject.Name = TabularModelHandler.Singleton.Model.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrWhiteSpace(name) ? "New <#= t.Name #>" : name);

			var obj = new <#= t.Name #>(metadataObject);

			TabularModelHandler.Singleton.Model.<#= Rules.GetCollection(t) #>.Add(obj);

			obj.Init();

			return obj;
		}

<# } #>

		/// <summary>
		/// Creates an exact copy of this <#= t.Name #> object.
		/// </summary>
		public <#= t.Name #> Clone(string newName = null<#= 
Rules.IsTranslatable(t, true) ? ", bool includeTranslations = true" : "" #><#=
Rules.GetParent(t) != "Model" ? ", " + Rules.GetParent(t) + " newParent = null" : "" #>) {
		    Handler.BeginUpdate("Clone <#= t.Name #>");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.<#= t.Name #>;

<# if(t.Name == "Table") { #>
			// Make sure that measures on the table are renamed:
			// TODO: This does not come up with a globally unique measure name.
			foreach(var m in tom.Measures) m.Name = MeasureCollection.GetNewMeasureName(m.Name);
<# } #>

			// Assign a new, unique name:
			tom.Name = Parent.<#= Rules.GetCollection(t) #>.MetadataObjectCollection.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject (but don't init until after we add it to the parent):
			var obj = CreateFromMetadata(tom, false);

			// Add the object to the parent collection:
<# if (Rules.GetParent(t) != "Model") { #>
			if(newParent != null) 
				newParent.<#= Rules.GetCollection(t)#>.Add(obj);
			else
    <# } #>			Parent.<#= Rules.GetCollection(t)#>.Add(obj);

			obj.InternalInit();
			obj.Init();
<# if (Rules.IsTranslatable(t, true)) { #>
			// Copy translations, if applicable:
			if(includeTranslations) {
				// TODO: Copy translations of child objects

				obj.TranslatedNames.CopyFrom(TranslatedNames);
				obj.TranslatedDescriptions.CopyFrom(TranslatedDescriptions);
<#     if (Rules.HasDisplayFolder(t)) { #>
				obj.TranslatedDisplayFolders.CopyFrom(TranslatedDisplayFolders);
<#     } #>
			}
<# } if (Rules.IsPerspectiveObject(t, true)) { #>
				
			// Copy perspectives:
			obj.InPerspective.CopyFrom(InPerspective);
<# } #>

            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
<# if (!Rules.IsTranslatable(t, true)) { #>
			if (includeTranslations) throw new ArgumentException("This object does not support translations", "includeTranslations");
<# } if (Rules.GetParent(t) == "Model") { #>
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
<# } #>
			return Clone(newName<#= Rules.IsTranslatable(t) ? ", includeTranslations" : "" #>);
		}

<# } #>
	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.<#= t.Name #>;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

<# } if (Rules.InCollection(t)) { #>
		public <#= Rules.GetParent(t) #> Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as <#= Rules.GetParent(t) #>;
			}
		}
<# } #>

<# if(Rules.HasCollections(t)) { #>
        internal override ITabularObjectCollection GetCollectionForChild(TabularObject child)
        {
<# foreach(var c in Rules.GetChildCollections(t)) { #>
			if (child is <#= c.Key.Name #>) return <#= Rules.CollectionName(c.Key) #>;
<# } #>
            return base.GetCollectionForChild(child);
        }
<# } #>

<# foreach(var c in Rules.GetChildCollections(t)) {
		var colName = Rules.CollectionName(c.Key);	
 #>
        /// <summary>
        /// The collection of <#= c.Key.Name #> objects on this <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(colName, t.Name) #>")]
		[Category("<#= Rules.GetCategory(colName, t.Name) #>"),IntelliSense("The collection of <#= Rules.GetDisplayName(c.Key.Name, t.Name) #> objects on this <#= t.Name #>.")]<#= Rules.GetOtherAttributes(colName, t.Name) #>
		public <#= c.Key.Name #>Collection <#= colName #> { get; protected set; }
<# } #>

		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		protected <#= t.Name #>(TOM.<#= t.Name #> metadataObject, bool init = true) : base(metadataObject)
		{
			if(init) InternalInit();
		}

		private void InternalInit()
		{
<# if(Rules.IsTranslatable(t)) { #>
			// Create indexers for translations:
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
<# } if(props.Any(p => p.Name == "DisplayFolder")) { #>
			TranslatedDisplayFolders = new TranslationIndexer(this, TOM.TranslatedProperty.DisplayFolder);
<# } if(Rules.IsPerspectiveObject(t)) { #>

			// Create indexers for perspectives:
			InPerspective = new Perspective<#= t.Name #>Indexer(this);
<# }#>
<# if(Rules.HasCollections(t)) { #>
			
			// Instantiate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #> = new <#= c.Key.Name #>Collection(this.GetObjectPath() + ".<#= colName #>", MetadataObject.<#= colName #>, this);
<#		} #>

			// Populate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CreateChildrenFromMetadata();
<#		} #>

			// Hook up event handlers on child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CollectionChanged += Children_CollectionChanged;
<#		} #>
<# } #>
		}


<# if(Rules.HasCollections(t)) { #>
		internal override void Reinit() {
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.Reinit();
<#		} #>
		}
<# } #>

		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
<# if(Rules.InCollection(t)) { #>
				case "Parent":
					return false;
<# } if(Rules.IsTranslatable(t)) { #>
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case "TranslatedNames":
				case "TranslatedDescriptions":
<#     if(Rules.HasDisplayFolder(t)) { #>
				case "TranslatedDisplayFolders":
<#     } #>
					return Model.Cultures.Any();
<# } if(Rules.IsPerspectiveObject(t)) { #>
				
				// Hides the perspective property in the grid, unless the model actually contains perspectives:
				case "InPerspective":
					return Model.Perspectives.Any();
<# } #>				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

<#  if (Rules.NeedsCollection(t)) { #>

	/// <summary>
	/// Collection class for <#= t.Name #>. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class <#= t.Name #>Collection: TabularObjectCollection<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>, TOM.<#= t.Name #>, TOM.<#= Rules.GetParent(t) #>>
	{
		public override TabularNamedObject Parent { get { return <#= Rules.GetParent(t) #>; } }
<# if (Rules.GetParent(t) != "Model") { #>
		public <#= Rules.GetParent(t) #> <#= Rules.GetParent(t) #> { get; protected set; }
<# } #>
		public <#= t.Name #>Collection(string collectionName, TOM.<#= t.Name #>Collection metadataObjectCollection, <#= Rules.GetParent(t) #> parent) : base(collectionName, metadataObjectCollection)
		{
<# if (Rules.GetParent(t) != "Model") { #>
			<#= Rules.GetParent(t) #> = parent;
<# } #>
		}

		internal override void Reinit() {
			for(int i = 0; i < Count; i++) {
<# if (t.Name == "Column") { #>
				if (MetadataObjectCollection[i] is TOM.RowNumberColumn) continue;
<# } #>
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
				item.MetadataObject = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>[i] as TOM.<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			MetadataObjectCollection = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the <#= t.Name #>Collection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		public override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
<# if(t.Name == "ModelRoleMember") { #>
				if(obj is TOM.WindowsModelRoleMember) WindowsModelRoleMember.CreateFromMetadata(obj as TOM.WindowsModelRoleMember).Collection = this;
				if(obj is TOM.ExternalModelRoleMember) ExternalModelRoleMember.CreateFromMetadata(obj as TOM.ExternalModelRoleMember).Collection = this;
<# } else if(t.Name == "Column") { #>
				switch(obj.Type) {
				    case TOM.ColumnType.Data: DataColumn.CreateFromMetadata(obj as TOM.DataColumn).Collection = this; break;
					case TOM.ColumnType.Calculated: CalculatedColumn.CreateFromMetadata(obj as TOM.CalculatedColumn).Collection = this; break;
					case TOM.ColumnType.CalculatedTableColumn:CalculatedTableColumn.CreateFromMetadata(obj as TOM.CalculatedTableColumn).Collection = this; break;
					default: break;
				}
<# } else if (t.Name == "Table") { #>
				switch(obj.GetSourceType()) {
				    case TOM.PartitionSourceType.Calculated: CalculatedTable.CreateFromMetadata(obj).Collection = this; break;
					default: Table.CreateFromMetadata(obj).Collection = this; break;
				}
<# } else if (t.Name == "Relationship") { #>
				switch((obj as TOM.Relationship).Type) {
					case TOM.RelationshipType.SingleColumn: SingleColumnRelationship.CreateFromMetadata(obj as TOM.SingleColumnRelationship).Collection = this; break;
				}
<# } else if (t.Name == "DataSource") { #>
				switch((obj as TOM.DataSource).Type) {
					case TOM.DataSourceType.Provider: ProviderDataSource.CreateFromMetadata(obj as TOM.ProviderDataSource).Collection = this; break;
#if CL1400
					case TOM.DataSourceType.Structured: StructuredDataSource.CreateFromMetadata(obj as TOM.StructuredDataSource).Collection = this; break;
#endif
				}
<# } else { #>
				<#= t.Name #>.CreateFromMetadata(obj).Collection = this;
<# } #>
			}
		}

<#      foreach(PropertyInfo p in props) 
		{   
			if (Rules.ShouldWrapCollectionProperty(p, t)) { #>
		[Description("Sets the <#= p.Name #> property of all objects in the collection at once.")]
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("<#= p.Name #>"));
				this.ToList().ForEach(item => { item.<#= p.Name #> = value; });
				Handler.UndoManager.EndBatch();
			}
		}
<#          }
        } #>

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "<#= t.Name #>" : "<#= t == typeof(Column) ? "Columns" : Rules.Collections[t]#>").ToLower());
		}
	}
<#  } #>
<#
       manager.EndBlock();
    }
#>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>