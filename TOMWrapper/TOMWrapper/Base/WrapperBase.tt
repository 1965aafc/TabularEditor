<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.AnalysisServices.Tabular, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AnalysisServices.Tabular" #>
<#@include file="Manager.ttinclude"#>
<#@include file="Rules.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.UndoFramework;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
<# manager.EndBlock();
 
   foreach(var t in Rules.ObjectTypes.Keys) {
	   manager.StartNewFile(t.Name + ".generated.cs");
	   var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
	   var tomRef = t.Name.ToLower() + "MetadataObject";
#>  
    /// <summary>
	/// Base class declaration for <#= t.Name #>
	/// </summary>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public <#= t.IsAbstract ? "abstract " : "" #>partial class <#= t.Name #>: <#= Rules.ObjectTypes[t]
#><#= props.Any(p => p.Name == "DisplayFolder") ? ", IDetailObject" : ""
#><#= props.Any(p => p.Name == "IsHidden") ? ", IHideableObject" : ""
#><#= props.Any(p => p.Name == "ErrorMessage") ? ", IErrorMessageObject" : ""
#><#= props.Any(p => p.Name == "Table") ? ", ITabularTableObject" : ""
#><#= props.Any(p => p.Name == "Description") ? ", IDescriptionObject" : ""
#><#= props.Any(p => p.Name == "Expression") ? ", IExpressionObject" : ""
#><#= props.Any(p => p.Name == "Annotations") ? ", IAnnotationObject" : ""
#>
	{
	    protected internal new TOM.<#= t.Name #> MetadataObject { get { return base.MetadataObject as TOM.<#= t.Name #>; } internal set { base.MetadataObject = value; } }

<# if((Rules.Collections.ContainsKey(t) || Rules.Collections.ContainsKey(t.BaseType) ) && !t.IsAbstract) { #>
		public <#= t.Name #>(<#= Rules.CollectionParent.ContainsKey(t) ? Rules.CollectionParent[t] : Rules.CollectionParent[t.BaseType] #> parent) : base(parent.Handler, new TOM.<#= t.Name #>(), false) {
			MetadataObject.Name = parent.MetadataObject.<#= Rules.Collections.ContainsKey(t) ? Rules.Collections[t] : Rules.Collections[t.BaseType] #>.GetNewName("New <#= t.Name #>");
			parent.<#= Rules.Collections.ContainsKey(t) ? Rules.Collections[t] : Rules.Collections[t.BaseType] #>.Add(this);
			Init();
		}
<# } #>

		public <#= t.Name #>(TabularModelHandler handler, TOM.<#= t.Name #> <#= tomRef #><# if(t.IsAbstract) { #>, bool autoInit = true <# } #>) : base(handler, <#= tomRef #><# if(t.IsAbstract) { #>, autoInit <# } #>)
		{
		}
<#
	foreach(PropertyInfo p in props) 
	{   
		if (p.Name == "Annotations") { #>
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.Find(name)?.Value;
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				MetadataObject.Annotations[name].Value = value;
			} else {
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
			}
			if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value));
		}
		<# }

		if (Rules.ShouldWrapProperty(p, t)) { #>
        /// <summary>
        /// Gets or sets the <#= p.Name #> of the <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(p.Name, t.Name) #>")]
		[Category("<#= Rules.GetCategory(p.Name, t) #>"),IntelliSense("The <#= Rules.GetDisplayName(p.Name, t.Name) #> of this <#= t.Name #>.")]<#= Rules.GetOtherAttributes(p.Name, t.Name) #>
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			<#= Rules.PropertyGetter(p) #>
			<#= Rules.PropertySetter(p) #>
		}
		private bool ShouldSerialize<#= p.Name #>() { return false; }
<#		}
		if (p.Name == "Description") { #>
        /// <summary>
        /// Collection of localized descriptions for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Descriptions"),Category("Translations and Perspectives")]
	    public new TranslationIndexer TranslatedDescriptions { get { return base.TranslatedDescriptions; } }
<#		}
		if (p.Name == "DisplayFolder") { #>
        /// <summary>
        /// Collection of localized Display Folders for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Display Folders"),Category("Translations and Perspectives")]
	    public new TranslationIndexer TranslatedDisplayFolders { get { return base.TranslatedDisplayFolders; } }
<#		}
		if (p.Name == "Table") { #>
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
<#      }
	}#>
    }
<#  if (Rules.CollectionParent.ContainsKey(t)) { #>

	/// <summary>
	/// Collection class for <#= t.Name #>. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public partial class <#= t.Name #>Collection: TabularObjectCollection<<#= t.Name #>, TOM.<#= t.Name #>, TOM.<#= Rules.CollectionParent[t] #>>
	{
		public <#= Rules.CollectionParent[t] #> Parent { get; private set; }

		public <#= t.Name #>Collection(TabularModelHandler handler, string collectionName, TOM.<#= t.Name #>Collection metadataObjectCollection, <#= Rules.CollectionParent[t] #> parent) : base(handler, collectionName, metadataObjectCollection)
		{
			Parent = parent;

			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in MetadataObjectCollection) {
<# if(t.Name == "Column") { #>
				switch(obj.Type) {
				    case TOM.ColumnType.Data: new DataColumn(handler, obj as TOM.DataColumn) { Collection = this }; break;
					case TOM.ColumnType.Calculated: new CalculatedColumn(handler, obj as TOM.CalculatedColumn) { Collection = this }; break;
					case TOM.ColumnType.CalculatedTableColumn: new CalculatedTableColumn(handler, obj as TOM.CalculatedTableColumn) { Collection = this }; break;
					default: break;
				}
<# } else if (t.Name == "Table") { #>
				switch(obj.GetSourceType()) {
				    case TOM.PartitionSourceType.Calculated: new CalculatedTable(handler, obj) { Collection = this }; break;
					default: new Table(handler, obj) { Collection = this }; break;
				}
<# } else if (t.Name == "Relationship") { #>
				switch((obj as TOM.Relationship).Type) {
					case TOM.RelationshipType.SingleColumn: new SingleColumnRelationship(handler, obj as TOM.SingleColumnRelationship) { Collection = this }; break;
				}
<# } else if (t.Name == "DataSource") { #>
				switch((obj as TOM.DataSource).Type) {
					case TOM.DataSourceType.Provider: new ProviderDataSource(handler, obj as TOM.ProviderDataSource) { Collection = this }; break;
					case TOM.DataSourceType.Structured: new StructuredDataSource(handler, obj as TOM.StructuredDataSource) { Collection = this }; break;
				}
<# } else { #>
				new <#= t.Name #>(handler, obj) { Collection = this };
<# } #>
			}
		}

<#      /*foreach(PropertyInfo p in props) { 
            if ((Rules.Aliases.ContainsKey(p.PropertyType) || p.PropertyType.IsEnum)
			    && p.SetMethod != null && p.SetMethod.IsPublic
				&& p.Name != "Name" && p.Name != "IsKey" && p.Name != "TableDetailPosition" && p.Name != "ObjectType"
				&& !p.Name.Contains("Ordinal") && !p.Name.Contains("IsDefault"))*/
   
		foreach(PropertyInfo p in props) 
		{   
			if (Rules.ShouldWrapCollectionProperty(p, t)) { #>
		[Description("Sets the <#= p.Name #> property of all objects in the collection at once.")]
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("<#= p.Name #>"));
				this.ToList().ForEach(item => { item.<#= p.Name #> = value; });
				Handler.UndoManager.EndBatch();
			}
		}
<#          }
        } #>

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "<#= t.Name #>" : "<#= t == typeof(Column) ? "Columns" : Rules.Collections[t]#>").ToLower());
		}
	}
<#  } #>
<#
       manager.EndBlock();
    }
#>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>